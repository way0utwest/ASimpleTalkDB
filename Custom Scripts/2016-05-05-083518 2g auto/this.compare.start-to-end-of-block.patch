diff --git a/Assemblies/tSQLtCLR.sql b/Assemblies/tSQLtCLR.sql
new file mode 100644
index 0000000..1e2cd39
--- /dev/null
+++ b/Assemblies/tSQLtCLR.sql
@@ -0,0 +1,158 @@
+--Assembly tsqltclr, version=1.0.4969.33062, culture=neutral, publickeytoken=c52df87e182deed0, processorarchitecture=msil
+CREATE ASSEMBLY [tSQLtCLR]
+AUTHORIZATION [dbo]
+FROM 0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000\
+504500004c0103009c7905520000000000000000e00002210b0108000044000000060000000000004e62000000200000008000000000400000200000000200000400000000000000040000000000000000c000000002000096c70000030040850000100000100000000010000010000000000000100000000000000000000000\
+006200004b00000000800000e80300000000000000000000000000000000000000a000000c000000746100001c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000080000000000000000000000082000004800000000000000000000002e74657874000000\
+54420000002000000044000000020000000000000000000000000000200000602e72737263000000e8030000008000000004000000460000000000000000000000000000400000402e72656c6f6300000c00000000a0000000020000004a00000000000000000000000000004000004200000000000000000000000000000000\
+3062000000000000480000000200050078330000fc2d0000090000000000000000000000000000005020000080000000000000000000000000000000000000000000000000000000000000000000000010db0cc9c9db80c544ab161ba00e5f51ee890d245cc392c8373f294a3c8cd8b928e9bf3d4fdd3dcecea7eae45cff13fb\
+6c4d8b9fecafcda33cb6735a3885399c3430c227c2da3ea631e16ae494f1b92fa66a4c8d331e1cde09c5286890283b49e2761e9c9ff4917e03246f3af596a0c56694fbd5529265f552425dad4b93814e1b3003006d00000001000011140a18730f00000a0b28020000060c08731000000a0a066f1100000a731200000a0d0906\
+6f1300000a090f01fe16070000016f1400000a6f1500000a096f1600000a26de0a072c06076f1700000adcde0f13047201000070110473060000067ade0a062c06066f1800000adc2a00000001280000020009003c45000a00000000000002004f51000f30000001020002006062000a00000000133003004e00000002000011\
+733b0000060a066f400000060b066f410000060c731900000a0d0972b6000070076f1a00000a0972ce000070178c330000016f1a00000a0972f6000070086f1a00000a096f1b00000a130411042a1e02281c00000a2a1e02281e00000a2a220203281f00000a2a26020304282000000a2a26020304282100000a2a3a02281c00\
+000a02037d010000042a7a0203280b000006027b01000004027b010000046f3d0000066f460000062a220203280b0000062a0000133002001400000003000011027b01000004036f420000060a066f2200000a2a6a282500000a6f2600000a6f2700000a6f1400000a282800000a2a0013300400320000000400001172160100\
+70282a00000a0a1200fe163e0000016f1400000a723a010070723e0100706f2b00000a282c00000a282800000a2a00001b3005002b020000050000110f00282d00000a2c0b7240010070731f00000a7a0f01282d00000a2c0c723e010070282800000a10010f02282d00000a2c0c723e010070282800000a1002733b0000060a\
+0f000f0128110000060b0607282800000a6f420000060c080428120000060d16130409166f2e00000a8e698d400000011305096f2f00000a13102b3b1210283000000a13061613072b1f110511071105110794110611079a6f3100000a283200000a9e110717581307110711068e6932d91104175813041210283300000a2dbc\
+de0e1210fe160200001b6f1700000adc1613082b1a110511081105110894209b000000283400000a9e110817581308110811058e6932de161309110513111613122b161111111294130a110917110a58581309111217581312111211118e6932e21109175813091109110417585a130917130b1109733500000a130c096f2f00\
+000a131338b00000001213283000000a130d110b2d08110c6f3600000a2616130e2b2c110c72760100706f3700000a110d110e9a28100000061105110e94280f0000066f3700000a26110e1758130e110e110d8e6932cc110c72760100706f3700000a26110b2c5116130b110c6f3600000a2616130f2b2c110c727a0100706f\
+3700000a26110c110c6f3800000a723a0100701105110f946f3900000a26110f1758130f110f110d8e6932cc110c727a0100706f3700000a261213283300000a3a44ffffffde0e1213fe160200001b6f1700000adc110c6f1400000a282800000a733a00000a2a00011c000002007e0048c6000e0000000002004801c30b020e\
+000000009202733b00000a16727e01007003026f3100000a59283900000a6f1400000a282c00000a2ad2026f3100000a209b000000312502161f4b6f3c00000a728201007002026f3100000a1f4b591f4b6f3c00000a283d00000a2a022a0000133003004500000006000011728e01007002fe16070000016f1400000a282c00\
+000a0a03fe16070000016f1400000a6f3100000a1631180672ac01007003fe16070000016f1400000a283d00000a0a062a000000133004009202000007000011026f3e00000a0a733f00000a0b066f4000000a6f4100000a0c0f01fe16070000016f1400000a723e0100706f4200000a2c47088d3f0000010d1613042b2a066f\
+4000000a11046f4300000a1305091104110572c20100706f4400000a6f1400000aa211041758130411040832d107096f4500000a380c0200000f0128130000061306734600000a13071106130c16130d2b2e110c110d9a130811086f3100000a2c181107110872d801007072de0100706f2b00000a6f4700000a110d1758130d\
+110d110c8e6932ca0711076f4800000a6f4500000a38ab010000088d3f000001130916130a388601000002110a6f4900000a2c0f1109110a72e2010070a23867010000066f4000000a110a6f4300000a72f00100706f4400000aa546000001130b110b130e110e1f0f3024110e1a59450400000078000000bc000000da000000\
+00010000110e1f0f2e563809010000110e1f13594503000000df000000f3000000df000000110e1f1f59450400000005000000d9000000590000006d00000038d40000001109110a02110a6f4a00000a284b00000a2815000006a238ca0000001109110a02110a6f4a00000a284b00000a2817000006a238ae0000001109110a\
+02110a6f4a00000a284b00000a2816000006a238920000001109110a02110a6f4a00000a2818000006a22b7e1109110a02110a6f4c00000a2819000006a22b6a1109110a02110a6f4d00000a130f120ffe16470000016f1400000aa22b4c1109110a02110a6f4e00000a13101210284f00000a13111211720a02007028500000\
+0aa22b261109110a02110a6f5100000a281a000006a22b121109110a02110a6f5200000a6f1400000aa2110a1758130a110a026f5300000a3f6dfeffff0711096f4500000a026f5400000a3a4afeffff072a0000133003002800000008000011723402007002fe16070000016f1400000a723a020070283d00000a7240020070\
+285500000a0a062a8202724c020070723e0100706f2b00000a72de010070723e0100706f2b00000a2a5e72500200700f00285600000a8c0e000001285700000a2a5e726e0200700f00285600000a8c0e000001285700000a2a5e72a60200700f00285600000a8c0e000001285700000a2a7272d00200700f00285800000a7359\
+00000a8c0e000001285700000a2a467210030070028c0f000001285700000a2a133003004400000009000011733b00000a7258030070283700000a0a0f00285a00000a0c160d2b1b0809910b061201725e030070285b00000a6f3700000a260917580d09088e6932df066f1400000a2a2e7264030070731f00000a7a2e726403\
+0070731f00000a7a2e7264030070731f00000a7a2e7264030070731f00000a7a1a735c00000a7a1a735c00000a7a1e02281e00000a2a220203281f00000a2a26020304282000000a2a26020304282100000a2a3a02281c00000a02037d040000042a00001b300300340000000a000011020328270000060a020428270000060b\
+027b0400000406076f44000006de140c027b04000004086f5d00000a6f45000006de002a01100000000000001f1f0014060000021b300200370000000b000011140a027b04000004036f420000060a066f5400000a26030628290000060b0307282a00000607282b0000060cde07062828000006dc082a000110000002000200\
+2c2e0007000000002a022c06026f2200000a2a001b3003002f0000000c000011036f3e00000a0bde240a72d80300700f00fe16070000016f1400000a72f4030070283d00000a0673230000067a072a00011000000000000009090024020000019a032d2272d80300700f00fe16070000016f1400000a723c040070283d00000a\
+73220000067a2a001b3004000f0100000d000011723e0100700a026f4000000a6f5e00000a0d38d5000000096f5f00000a74190000010b0772780400706f4400000a6f1400000a728a040070286000000a39aa00000006724c020070282c00000a0a026f6100000a6f5e00000a13042b6311046f5f00000a74140000010c0828\
+2c0000062c4e0613051c8d0100000113061106161105a21106177294040070a2110618086f6200000aa21106197298040070a211061a07086f6200000a6f4400000aa211061b729c040070a21106286300000a0a11046f6400000a2d94de1511047506000001130711072c0711076f1700000adc0672de010070282c00000a0a\
+096f6400000a3a20ffffffde14097506000001130811082c0711086f1700000adc062a00011c000002005b0070cb00150000000002001200e7f9001400000000aa026f6200000a72a00400701b6f6500000a2d15026f6200000a72a60400701b6f6500000a16fe012a162a3a02281c00000a02037d050000042a000013300300\
+a50000000e0000110203282f000006027b05000004046f420000060a160b066f5300000a1631270717580b07286600000a03286700000a286800000a2c080628300000062b08066f6900000a2dd9066f2200000a07286600000a03286a00000a286800000a2c451b8d3f0000010c081672b0040070a208171201286b00000aa2\
+081872e2040070a208190f01fe16150000016f1400000aa2081a7214050070a208286c00000a73220000067a2a000000033003004f000000000000000316286600000a286a00000a25286800000a2d110f01286d00000a286e00000a286f00000a286800000a2c2272380500700f01fe16150000016f1400000a729605007028\
+3d00000a73220000067a2a0013300300290000000f0000110228330000060a287000000a06737100000a6f7200000a02062831000006287000000a6f7300000a2a722b11287000000a020328320000066f7400000a026f5400000a2de72a000013300200250000001000001103737100000a0a026f5300000a8d010000010b02\
+076f7500000a2606076f7600000a26062a0000001b3003005800000011000011026f3e00000a0a0628340000060b076f7700000a8d160000010c160d076f7800000a13052b171205287900000a1304080911042835000006a20917580d1205287a00000a2de0de0e1205fe160500001b6f1700000adc082a0110000002002400\
+2448000e000000001b3002006600000012000011737b00000a0a026f4000000a6f5e00000a0c2b35086f5f00000a74190000010b0772780400706f4400000a6f1400000a6f7c00000a72b2050070286000000a2c0806076f7d00000a26086f6400000a2dc3de110875060000010d092c06096f1700000adc062a000001100000\
+020012004153001100000000133005006f010000130000110272f00100706f4400000aa5460000010a0272c20100706f4400000a743f0000010b0272bc0500706f4400000a74550000010c06130411044523000000050000000d000000050000000d000000050000004b000000050000000500000005000000050000000d0000\
+000500000026000000050000000500000005000000050000000500000005000000050000000500000026000000260000000500000086000000050000008600000086000000860000007d0000008600000005000000050000004b0000004b00000038810000000706737e00000a2a07060272ce0500706f4400000aa540000001\
+6a737f00000a2a0272ce0500706f4400000aa5400000010d0920ff7f00003102150d0706096a737f00000a2a07060272e40500706f4400000a288000000a288100000a0272060600706f4400000a288000000a288100000a738200000a2a070608738300000a2a7220060070068c460000016f1400000a7236060070283d0000\
+0a738400000a7a00133003001400000014000011733b00000673250000060a0602036f260000062a133003001400000015000011733b000006732d0000060a0602036f2e0000062a133002000e0000001600001173030000060a06026f010000062a0000133002001300000017000011733b00000673080000060a06026f0900\
+00062a00133002001300000017000011733b00000673080000060a06026f0a0000062a3602281c00000a02283e0000062a72027b080000042d0d02283f00000602177d0800000402288500000a2a1e027b070000042a9e02738600000a7d06000004027b06000004727e0600706f8700000a027b060000046f1100000a2a3202\
+7b060000046f8800000a2a001330020028000000180000110272b0060070282800000a28420000060a066f5400000a2606166f8900000a0b066f2200000a072a32027b060000046f8a00000a2a000000133004005100000019000011027e8b00000a7d07000004027b0600000402fe0643000006738c00000a6f8d00000a7312\
+00000a0a06027b060000046f1300000a060f01fe16070000016f1400000a6f1500000a061a6f8e00000a0b072a000000033004004400000000000000027c07000004282d00000a2c1002723e010070282800000a7d0700000402257b07000004046f8f00000a72fa060070282c00000a282800000a289000000a7d070000042a\
+13300300500000001a000011731200000a0a06027b060000046f1300000a0672000700706f1500000a066f9100000a7232070070036f9200000a26066f9100000a7244070070046f9200000a26061a6f9300000a066f1600000a262a133003003e0000001a000011731200000a0a06027b060000046f1300000a067252070070\
+6f1500000a066f9100000a7268070070036f9200000a26061a6f9300000a066f1600000a262a000013300300430000001a000011731200000a0a06027b060000046f1300000a06727a0700706f1500000a066f9100000a72aa070070038c070000016f9200000a26061a6f9300000a066f1600000a262a0042534a4201000100\
+000000000c00000076322e302e35303732370000000005006c000000c80d0000237e0000340e00000c11000023537472696e677300000000401f0000b407000023555300f426000010000000234755494400000004270000f806000023426c6f620000000000000002000001579fa2090900000000fa25330016000001000000\
+600000000a0000000800000046000000490000000300000093000000020000000f000000010000001a00000002000000050000000500000005000000010000000400000000000a000100000000000600da00d3000600e100d3000600eb00d3000a00160101010a003b01200106004c01d3000a00580101010600b50198010600\
+c70198010a005a0201010600b6029b020a00d302bd020a001103010106005703d30006007503d3000a009e0301010600e703dd030600f903dd030a006304f5000a00b504f5000a00eb0401010a00430520010a00640520010e00ab059b020a00b805f5000a000b06bd020a009306bd020600820870080600990870080600b608\
+70080600d50870080600ee08700806000709700806002209700806003d09700806007509560906008909d30006009f0970080600cb09b8099f00df09000006000e0aee0906002e0aee091200600a4c0a1200710a4c0a0a009b0a880a0a00ad0abd020a00c70a880a0600070bf70a0a00190bbd020a00340b880a0600570bd300\
+0600740bd3000a008a0b880a0a00970b20010a00b30b20010600ba0b56090600d00b56090600db0b70080600f90b700806000e0cd3000a002e0c20010600410cd30006004e0cd30006006d0cd3002f00730c00000600a30cd3000600c50cb90c0a00050df5000a00200df5000a00610df5000a00890d01010a00a20d01010600\
+c30dd3000e000e0eef0d0600240ed3000600290ed3000600600e4d0e0a007a0ef5000600aa0ed3000a00c60e01010a00090f20010a00140f20016300730c00000e00730f9b0206008c0fd3000600a60f910f0600c70fd3000600cf0fd3000600e60fd3000600f80fd3000e00371021100a005810bd020a008310f5000a00ad10\
+bd020a00d310bd020a00ed10f500000000000100000000000100010000001000170027000500010001000120100030002700090001000400000010004900270005000100080009011000560027000d0002000c000120100063002700090004002100000010007d0027000500040025000000100096002700050005002d008101\
+1000a600270005000600360000001000b7002700050006003b000100d8012c0051802102360051802d0246000100d8012c000100d8012c00010019064b01010024064f01010030065301d02000000000860062010a00010074210000000091006a0110000200ce21000000008618920114000200d62100000000861892011400\
+0200de21000000008618920118000200e72100000000861892011d000300f121000000008418920124000500fb210000000086189201300007000a22000000008300eb010a000800292200000000830003020a000900342200000000830012020a000a0054220000000096003e024e000b00702200000000960043024e000b00\
+b022000000009600630253000b00042500000000910071025e000e0029250000000091007b026400100060250000000091008b0269001100b425000000009100e102730013005428000000009100f502800015008828000000009100090364001600a9280000000091001d0388001700c1280000000091002d0388001800d928\
+000000009100410388001900f12800000000910060038e001a000e29000000009100840394001b002029000000009100a8039a001c007029000000009608ba03a0001d007c2900000000e609c303a5001d008829000000009600ce03a9001d00942900000000c600d403b0001e00a02900000000e601f403b4001e00a7290000\
+0000e6010604ba001f00ae29000000008618920114002000b629000000008618920118002000bf2900000000861892011d002100c929000000008418920124002300d329000000008618920130002500e4290000000086001804c9002600342a0000000081003904d1002800882a0000000091005704d7002900942a00000000\
+91006d04dd002a00e02a0000000091008504e6002c00082b000000009100a304ee002e00402c000000009100c004f4002f006b2c0000000086189201300030007c2c000000008600f404fa003100302d0000000081001605020133008c2d0000000091002e05d7003400c12d0000000091004f0508013500e02d000000009100\
+720511013700142e00000000910090051b013900882e000000009100c00523013a000c2f000000009100d4052e013b008830000000009600180435013c00a83000000000960096003d013e00c830000000009600ef0545014000e430000000009600fd0545014100043100000000960003024501420023310000000086189201\
+14004300313100000000e6013906140043004e3100000000860841065601430056310000000081005106140043007e310000000081005906140043008c310000000086086406b0004300c0310000000086087306b0004300d03100000000860084065b0143003032000000008400ab06620144008032000000008600b9066901\
+4600dc32000000008600c606180048002833000000008600e4060a004900000001001a07000001002207000001002207000002002a07000001003907000002003e0700000100d801000001001a07000001001a07000001001a07000001004607000002005007000003005c07000001006707000002006d070000010074070000\
+01004607000002005007000001007c07000002008307000001005c0700000100a00700000100ab0700000100ab0700000100ab0700000100ab0700000100b30700000100bc0700000100670700000100c60700000100c807000001002207000001002207000002002a07000001003907000002003e0700000100d80100000100\
+ca0700000200da07000001001a07000001007c07000001001a07000002007c07000001001a0700000200e80700000100e80700000100ef0700000100d80100000100f607000002001a0700000100f607000001000208000001000208000002000d08000001000208000002000d0800000100020800000100e807000001001208\
+00000100ca0700000200da07000001002008000002001a07000001001a07000001001a07000001001a07000001002c08000001003408000002003b08000001004008000002004f08000001005c08000001006b0805001100050015000a001900e10092011800e90092011800f10092011800f900920118000101920118000901\
+92011800110192011800190192011800210192017801290192017801310192011800390192017d01490192018401510192011400590192012b02d100920118006901a80a14007101920114007101b80a32020900d403b0007901d10a18007901e10a38023100390614006901f10a140089019201140091014e0b4b0291015f0b\
+b000090092011400a10192011400110092011400110092011800110092011d00110092012400a901f10a1400b10192016102c10192019402d101e40b9b02d101060ca102d901160ca7023900220cad02e90192011400f101460c4403f901550c4a03f9015d0c50033900c303a5000c00640c63030c007e0c690314008c0c7b03\
+f901980c38021102a80c80031400ac0ca5001102b50c80031902920184011902d30c86031902de0c8c031902980c38021902e50c9303510092010a00190292011400f901ec0ccc03f9015d0cd203a901f60cdd030c00920114009900170de20329023b0d3802f901450de8032102640ced03c900640cf3030c004c0df8031c00\
+920114001c004c0df8031c00500d0404a901580d0a04a9016b0d0f046900220c15046100770d1c046100940d22046100ac0d29044102b90d30044902d40334046100ca0d3904a901d70d3f04a901e00d3802a901f403a5005102140e70046900b90d7c04f901b30b810471001a0e8704710092018b048100b90d90045902d403\
+34046102920114001100410eb00029027e0cb50469028c0cbb04f9016c0ebf0499008f0ec504a1009b0eb000f9015d0ccb046902ac0ca500f901bb0ee604a900220cee04a900d10ef4048102dd0efe04a901e50ea500a900f00ef4040102d403b000f9015d0c0505a900c303a5008102220c13058102fc0e1a0589021c0f2605\
+b90092012c059102250f33059102360f14009102450f33056100540f3f05b900610f3f0524003b0d380224007e0c53052c008c0c7b032c00ac0ca500240092011400f9016b0fb0002400840f7d05b10092019905b1009201a105b102b20faa05b902df0fb005b1009201b805b1009201c205c90292011800d102fb0fef05d100\
+9201140069010c101800d90239061400a9014110f40569014b10b00039000c044f01e1029201ff05d10073100506710193100c06d900410eb0003900a1101c067101c4102506f102e0102b067901f91033060e000800390008000c0049002e002b0093062e007300d8062e000b0040062e0013004e062e001b007d062e002300\
+83062e0033009e062e003b007d062e004b007d062e005300c0062e006300c6062e006b00cf06a3001b016802a0014b01b302c0014b01b30200000100000005003c0251025c0256039c03d9034404770495049f04a604ae04d1040b053905450565058905cd05db05e005e505ea05f90514063a06050001000a00030000000c04\
+c00000001104c5000000f6066f0100000207740100000d07740102001b00030002001c00050002003d000700020040000900020041000b005c037303fe034c055d05048000000100000069132681010000008901270000000200000000000000000000000100ca00000000000200000000000000000000000100f50000000000\
+0200000000000000000000000100d3000000000002000000000000000000000001004c0a0000000000000000003c4d6f64756c653e007453514c74434c522e646c6c00436f6d6d616e644578656375746f72007453514c74434c5200436f6d6d616e644578656375746f72457863657074696f6e004f7574707574436170746f\
+72007453514c745072697661746500496e76616c6964526573756c74536574457863657074696f6e004d65746144617461457175616c697479417373657274657200526573756c7453657446696c7465720053746f72656450726f6365647572657300546573744461746162617365466163616465006d73636f726c69620053\
+797374656d004f626a65637400457863657074696f6e0056616c7565547970650053797374656d2e446174610053797374656d2e446174612e53716c547970657300494e756c6c61626c65004d6963726f736f66742e53716c5365727665722e536572766572004942696e61727953657269616c697a650049446973706f7361\
+626c650053716c537472696e67004578656375746500437265617465436f6e6e656374696f6e537472696e67546f436f6e746578744461746162617365002e63746f720053797374656d2e52756e74696d652e53657269616c697a6174696f6e0053657269616c697a6174696f6e496e666f0053747265616d696e67436f6e74\
+6578740074657374446174616261736546616361646500436170747572654f7574707574546f4c6f675461626c650053757070726573734f75747075740045786563757465436f6d6d616e64004e554c4c5f535452494e47004d41585f434f4c554d4e5f574944544800496e666f00437265617465556e697175654f626a6563\
+744e616d650053716c4368617273005461626c65546f537472696e6700506164436f6c756d6e005472696d546f4d61784c656e6774680067657453716c53746174656d656e740053797374656d2e436f6c6c656374696f6e732e47656e65726963004c69737460310053797374656d2e446174612e53716c436c69656e740053\
+716c44617461526561646572006765745461626c65537472696e6741727261790053706c6974436f6c756d6e4e616d654c69737400756e71756f74650053716c4461746554696d650053716c44617465546f537472696e670053716c4461746554696d65546f537472696e6700536d616c6c4461746554696d65546f53747269\
+6e67004461746554696d650053716c4461746554696d6532546f537472696e67004461746554696d654f66667365740053716c4461746554696d654f6666736574546f537472696e670053716c42696e6172790053716c42696e617279546f537472696e67006765745f4e756c6c006765745f49734e756c6c00506172736500\
+546f537472696e670053797374656d2e494f0042696e61727952656164657200526561640042696e617279577269746572005772697465004e756c6c0049734e756c6c00417373657274526573756c74536574734861766553616d654d6574614461746100637265617465536368656d61537472696e6746726f6d436f6d6d61\
+6e6400636c6f736552656164657200446174615461626c6500617474656d7074546f476574536368656d615461626c65007468726f77457863657074696f6e4966536368656d614973456d707479006275696c64536368656d61537472696e670044617461436f6c756d6e00636f6c756d6e50726f7065727479497356616c69\
+64466f724d65746144617461436f6d70617269736f6e0053716c496e7433320073656e6453656c6563746564526573756c74536574546f53716c436f6e746578740076616c6964617465526573756c745365744e756d6265720073656e64526573756c747365745265636f7264730053716c4d657461446174610073656e6445\
+6163685265636f72644f66446174610053716c446174615265636f7264006372656174655265636f7264506f70756c617465645769746844617461006372656174654d65746144617461466f72526573756c74736574004c696e6b65644c69737460310044617461526f7700676574446973706c61796564436f6c756d6e7300\
+63726561746553716c4d65746144617461466f72436f6c756d6e004e6577436f6e6e656374696f6e00436170747572654f75747075740053716c436f6e6e656374696f6e00636f6e6e656374696f6e00696e666f4d65737361676500646973706f73656400446973706f7365006765745f496e666f4d65737361676500636f6e\
+6e65637400646973636f6e6e656374006765745f5365727665724e616d65006765745f44617461626173654e616d650065786563757465436f6d6d616e640053716c496e666f4d6573736167654576656e7441726773004f6e496e666f4d65737361676500617373657274457175616c73006661696c5465737443617365416e\
+645468726f77457863657074696f6e006c6f6743617074757265644f757470757400496e666f4d657373616765005365727665724e616d650044617461626173654e616d6500636f6d6d616e64006d65737361676500696e6e6572457863657074696f6e00696e666f00636f6e74657874005461626c654e616d65004f726465\
+724f7074696f6e00436f6c756d6e4c69737400696e707574006c656e67746800726f774461746100726561646572005072696e744f6e6c79436f6c756d6e4e616d65416c6961734c69737400636f6c756d6e4e616d6500647456616c75650064746f56616c75650073716c42696e61727900720077006578706563746564436f\
+6d6d616e640061637475616c436f6d6d616e6400736368656d6100636f6c756d6e00726573756c747365744e6f0064617461526561646572006d65746100636f6c756d6e44657461696c7300726573756c745365744e6f00436f6d6d616e640073656e6465720061726773006578706563746564537472696e67006163747561\
+6c537472696e67006661696c7572654d65737361676500746578740053797374656d2e5265666c656374696f6e00417373656d626c795469746c6541747472696275746500417373656d626c794465736372697074696f6e41747472696275746500417373656d626c79436f6e66696775726174696f6e417474726962757465\
+00417373656d626c79436f6d70616e7941747472696275746500417373656d626c7950726f6475637441747472696275746500417373656d626c79436f7079726967687441747472696275746500417373656d626c7954726164656d61726b41747472696275746500417373656d626c7943756c747572654174747269627574\
+650053797374656d2e52756e74696d652e496e7465726f70536572766963657300436f6d56697369626c6541747472696275746500434c53436f6d706c69616e7441747472696275746500417373656d626c7956657273696f6e4174747269627574650053797374656d2e446961676e6f73746963730044656275676761626c\
+6541747472696275746500446562756767696e674d6f6465730053797374656d2e52756e74696d652e436f6d70696c6572536572766963657300436f6d70696c6174696f6e52656c61786174696f6e734174747269627574650052756e74696d65436f6d7061746962696c6974794174747269627574650053797374656d2e54\
+72616e73616374696f6e73005472616e73616374696f6e53636f7065005472616e73616374696f6e53636f70654f7074696f6e0053797374656d2e446174612e436f6d6d6f6e004462436f6e6e656374696f6e004f70656e0053716c436f6d6d616e64007365745f436f6e6e656374696f6e004462436f6d6d616e6400736574\
+5f436f6d6d616e645465787400457865637574654e6f6e517565727900436c6f73650053797374656d2e5365637572697479005365637572697479457863657074696f6e0053716c436f6e6e656374696f6e537472696e674275696c646572004462436f6e6e656374696f6e537472696e674275696c646572007365745f4974\
+656d00426f6f6c65616e006765745f436f6e6e656374696f6e537472696e670053657269616c697a61626c65417474726962757465004462446174615265616465720053716c55736572446566696e65645479706541747472696275746500466f726d6174005374727563744c61796f7574417474726962757465004c61796f\
+75744b696e6400417373656d626c7900476574457865637574696e67417373656d626c7900417373656d626c794e616d65004765744e616d650056657273696f6e006765745f56657273696f6e006f705f496d706c696369740053716c4d6574686f644174747269627574650047756964004e65774775696400537472696e67\
+005265706c61636500436f6e636174006765745f4974656d00496e74333200456e756d657261746f7200476574456e756d657261746f72006765745f43757272656e74006765745f4c656e677468004d617468004d6178004d6f76654e657874004d696e0053797374656d2e5465787400537472696e674275696c6465720041\
+7070656e644c696e6500417070656e6400496e7365727400537562737472696e6700476574536368656d615461626c650044617461526f77436f6c6c656374696f6e006765745f526f777300496e7465726e616c44617461436f6c6c656374696f6e42617365006765745f436f756e7400457175616c730041646400546f4172\
+72617900497344424e756c6c0053716c446254797065004765744461746554696d65004765744461746554696d654f66667365740053716c446563696d616c0047657453716c446563696d616c0053716c446f75626c650047657453716c446f75626c65006765745f56616c756500446f75626c650047657453716c42696e61\
+72790047657456616c7565006765745f4669656c64436f756e740053797374656d2e546578742e526567756c617245787072657373696f6e730052656765780053706c6974006765745f5469636b730042797465004e6f74496d706c656d656e746564457863657074696f6e006765745f4d6573736167650053797374656d2e\
+436f6c6c656374696f6e730049456e756d657261746f72006f705f496e657175616c6974790044617461436f6c756d6e436f6c6c656374696f6e006765745f436f6c756d6e73006765745f436f6c756d6e4e616d6500537472696e67436f6d70617269736f6e00537461727473576974680053716c426f6f6c65616e006f705f\
+457175616c697479006f705f54727565004e657874526573756c74006f705f4c6573735468616e006f705f426974776973654f720053716c436f6e746578740053716c50697065006765745f506970650053656e64526573756c747353746172740053656e64526573756c7473456e640053656e64526573756c7473526f7700\
+47657453716c56616c7565730053657456616c75657300546f4c6f776572004c696e6b65644c6973744e6f64656031004164644c61737400547970650053797374656d2e476c6f62616c697a6174696f6e0043756c74757265496e666f006765745f496e76617269616e7443756c7475726500436f6e766572740049466f726d\
+617450726f766964657200546f4279746500417267756d656e74457863657074696f6e00474300537570707265737346696e616c697a65007365745f436f6e6e656374696f6e537472696e670053797374656d2e436f6d706f6e656e744d6f64656c00436f6d706f6e656e7400476574537472696e67006765745f4461746162\
+6173650053716c496e666f4d6573736167654576656e7448616e646c6572006164645f496e666f4d65737361676500436f6d6d616e644265686176696f720045786563757465526561646572006f705f4164646974696f6e0053716c506172616d65746572436f6c6c656374696f6e006765745f506172616d65746572730053\
+716c506172616d65746572004164645769746856616c756500436f6d6d616e6454797065007365745f436f6d6d616e6454797065000000000080b34500720072006f007200200063006f006e006e0065006300740069006e006700200074006f002000640061007400610062006100730065002e00200059006f00750020006d\
+006100790020006e00650065006400200074006f00200063007200650061007400650020007400530051004c007400200061007300730065006d0062006c007900200077006900740068002000450058005400450052004e0041004c005f004100430043004500530053002e0000174400610074006100200053006f00750072\
+0063006500002749006e0074006500670072006100740065006400200053006500630075007200690074007900001f49006e0069007400690061006c00200043006100740061006c006f00670000237400530051004c0074005f00740065006d0070006f0062006a006500630074005f0000032d00010100354f0062006a0065\
+006300740020006e0061006d0065002000630061006e006e006f00740020006200650020004e0055004c004c0000037c0000032b0000032000000b3c002e002e002e003e00001d530045004c0045004300540020002a002000460052004f004d002000001520004f0052004400450052002000420059002000001543006f006c\
+0075006d006e004e0061006d00650000055d005d0000035d00000d21004e0055004c004c0021000019500072006f00760069006400650072005400790070006500002930002e0030003000300030003000300030003000300030003000300030003000300045002b00300000055d002c0000052c005b00000b5c005d002c005c\
+005b0000035b00001d7b0030003a0079007900790079002d004d004d002d00640064007d0001377b0030003a0079007900790079002d004d004d002d00640064002000480048003a006d006d003a00730073002e006600660066007d0001297b0030003a0079007900790079002d004d004d002d00640064002000480048003a\
+006d006d007d00013f7b0030003a0079007900790079002d004d004d002d00640064002000480048003a006d006d003a00730073002e0066006600660066006600660066007d0001477b0030003a0079007900790079002d004d004d002d00640064002000480048003a006d006d003a00730073002e00660066006600660066\
+006600660020007a007a007a007d0001053000780000055800320000737400530051004c007400500072006900760061007400650020006900730020006e006f007400200069006e00740065006e00640065006400200074006f002000620065002000750073006500640020006f0075007400730069006400650020006f0066\
+0020007400530051004c0074002100001b540068006500200063006f006d006d0061006e00640020005b0000475d00200064006900640020006e006f0074002000720065007400750072006e00200061002000760061006c0069006400200072006500730075006c0074002000730065007400003b5d00200064006900640020\
+006e006f0074002000720065007400750072006e0020006100200072006500730075006c0074002000730065007400001149007300480069006400640065006e000009540072007500650000037b0000033a0000037d0000054900730000094200610073006500003145007800650063007500740069006f006e002000720065\
+007400750072006e006500640020006f006e006c00790020000031200052006500730075006c00740053006500740073002e00200052006500730075006c00740053006500740020005b0000235d00200064006f006500730020006e006f0074002000650078006900730074002e00005d52006500730075006c007400530065\
+007400200069006e00640065007800200062006500670069006e007300200061007400200031002e00200052006500730075006c007400530065007400200069006e0064006500780020005b00001b5d00200069007300200069006e00760061006c00690064002e000009740072007500650000114400610074006100540079\
+0070006500001543006f006c0075006d006e00530069007a00650000214e0075006d00650072006900630050007200650063006900730069006f006e0000194e0075006d0065007200690063005300630061006c006500001541007200670075006d0065006e00740020005b0000475d0020006900730020006e006f00740020\
+00760061006c0069006400200066006f007200200052006500730075006c007400530065007400460069006c007400650072002e00003143006f006e007400650078007400200043006f006e006e0065006300740069006f006e003d0074007200750065003b000049530045004c004500430054002000530045005200560045\
+005200500052004f0050004500520054005900280027005300650072007600650072004e0061006d006500270029003b0001050d000a0000317400530051004c0074002e0041007300730065007200740045007100750061006c00730053007400720069006e006700001145007800700065006300740065006400000d410063\
+007400750061006c0000157400530051004c0074002e004600610069006c0000114d006500730073006100670065003000002f7400530051004c0074002e004c006f006700430061007000740075007200650064004f00750074007000750074000009740065007800740000946fb26c0931484fb9fb7016cdbc81ad0008b77a\
+5c561934e08905200101111d0300000e03200001042001010e062002010e120907200201122111250306122805200101122802060e0c21004e0055004c004c002100020608049b000000040000111d0a00031229111d111d111d0500020e0e080400010e0e0900020e10111d10111d0c000215122d011d0e1231111d0700011d\
+0e10111d0500010e11350500010e11390500010e113d0500010e11410400001114032000020600011114111d0320000e05200101124505200101124904080011140328000207200201111d111d0520010e111d050001011231080002124d111d123107000201111d124d0500010e124d050001021251072002011155111d0520\
+010111550800020112311d1259090002125d12311d12590700011d125912310a0001151261011265124d0600011259126507000201111d111d070002011155111d05000101111d030612690306111d020602042000111d0620011231111d062002011c126d052002010e0e042800111d0328000e0420010102062001011180a1\
+042001010880a00024000004800000940000000602000000240000525341310004000001000100590ab8c4cf2a26fa41954eeaabe1e3d152a84c81f41e1fad58eae59dfb9d7d3520d36fdfc23567120af4b46acc235a150b34cf341ad40147e9dd4f11a1a7a8d20664924f46776fd00aa300f2e09f7bfbe5583fffbb233b2440\
+1a3c0894e805ba8be5451fdbd81ad24e0897512a842b08e1fc09cc6f35b3b21b5f927687887ac4062001011180b1052001011269032000080e070512691280ad0e1280b91280c1052002010e1c0a070512280e0e1280c50e0407011231062001011180dd2b010002000000020054080b4d61784279746553697a650100000054\
+020d497346697865644c656e67746801062001011180e50500001280e90520001280ed0520001280f1050001111d0e808f010001005455794d6963726f736f66742e53716c5365727665722e5365727665722e446174614163636573734b696e642c2053797374656d2e446174612c2056657273696f6e3d322e302e302e302c\
+2043756c747572653d6e65757472616c2c205075626c69634b6579546f6b656e3d623737613563353631393334653038390a44617461416363657373010000000500001180f90520020e0e0e0500020e0e0e0507011180f90615122d011d0e052001130008092000151181050113000715118105011d0e042000130005000208\
+080805200012810d06200112810d0e08200312810d080e082f071412280e123115122d011d0e081d081d0e080808080212810d1d0e080815118105011d0e1d080815118105011d0e0520020e08080600030e0e0e0e0307010e042000124d052000128111042001020e0520011265080420011c0e0520010113000515122d010e\
+0520001d1300042001020805200111390806000111351139052001113d0806200111811d08062001118121080320000d0420010e0e0520011141080420011c082b0712124d15122d011d0e081d0e0812651d0e15122d010e0e1d0e081181191d0e0811811911811d1181210d0600021d0e0e0e0407011d0e0420001139050002\
+0e0e1c0320000a042001010a0420001d0509070412810d051d05080607030e0e12180707031231124d0e0607021209124d0520001281350320001c050002020e0e0520001281390500010e1d1c1407090e126512511281351281351c1d1c12191219072002020e11813d05000111550809000211814111551155060001021181\
+410500010e1d0e0707031231081d0e060001118141020b0002118141118141118141050000128149062001011d125905200101125d0507011d1259052001081d1c060702125d1d1c061512610112650920001511814d011300071511814d011265170706124d1512610112651d12590812651511814d0112650b200115128151\
+01130013000f070415126101126512651281351219072002010e118119082003010e1181190a050000128159070002051c128161092004010e11811905050a2003010e1181191281550d07051181190e12815508118119040701121c040701122004070112080407011210040001011c0420010e0805070212310e052002011c\
+180620010112817107200112311181750707021280b91231080002111d111d111d05200012817907200212817d0e1c062001011181810507011280b90d0100087453514c74434c5200002e010029434c527320666f7220746865207453514c7420756e69742074657374696e67206672616d65776f726b00000501000000000f\
+01000a73716c6974792e6e657400000a0100057453514c7400002101001c436f7079726967687420c2a92073716c6974792e6e6574203230313000000501000100000801000200000000000801000800000000001e01000100540216577261704e6f6e457863657074696f6e5468726f77730100000000009c79055200000000\
+020000006d00000090610000904300005253445380da730a2381054bbb8e51b808023b8701000000633a5c4275696c644167656e745c776f726b5c386136326462363131306137363136655c7453514c74434c525c7453514c74434c525c6f626a5c437275697365436f6e74726f6c5c7453514c74434c522e70646200000000\
+2862000000000000000000003e620000002000000000000000000000000000000000000000000000306200000000000000005f436f72446c6c4d61696e006d73636f7265652e646c6c0000000000ff25002040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+00000000000000000000000000000100100000001800008000000000000000000000000000000100010000003000008000000000000000000000000000000100000000004800000058800000900300000000000000000000900334000000560053005f00560045005200530049004f004e005f0049004e0046004f0000000000\
+bd04effe00000100000001002681691300000100268169133f000000000000000400000002000000000000000000000000000000440000000100560061007200460069006c00650049006e0066006f00000000002400040000005400720061006e0073006c006100740069006f006e00000000000000b004f002000001005300\
+7400720069006e006700460069006c00650049006e0066006f000000cc02000001003000300030003000300034006200300000006c002a00010043006f006d006d0065006e0074007300000043004c0052007300200066006f007200200074006800650020007400530051004c007400200075006e0069007400200074006500\
+7300740069006e00670020006600720061006d00650077006f0072006b00000038000b00010043006f006d00700061006e0079004e0061006d00650000000000730071006c006900740079002e006e0065007400000000003c0009000100460069006c0065004400650073006300720069007000740069006f006e0000000000\
+7400530051004c00740043004c0052000000000040000f000100460069006c006500560065007200730069006f006e000000000031002e0030002e0034003900360039002e0033003300300036003200000000003c000d00010049006e007400650072006e0061006c004e0061006d00650000007400530051004c0074004300\
+4c0052002e0064006c006c00000000005c001c0001004c006500670061006c0043006f007000790072006900670068007400000043006f0070007900720069006700680074002000a9002000730071006c006900740079002e006e006500740020003200300031003000000044000d0001004f0072006900670069006e006100\
+6c00460069006c0065006e0061006d00650000007400530051004c00740043004c0052002e0064006c006c00000000002c0006000100500072006f0064007500630074004e0061006d006500000000007400530051004c007400000044000f000100500072006f006400750063007400560065007200730069006f006e000000\
+31002e0030002e0034003900360039002e00330033003000360032000000000048000f00010041007300730065006d0062006c0079002000560065007200730069006f006e00000031002e0030002e0034003900360039002e003300330030003600320000000000000000000000000000000000000000000000000000000000\
+006000000c000000503200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
+0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
+
+WITH PERMISSION_SET=EXTERNAL_ACCESS
+GO
diff --git a/Data/dbo.CountryCodes_Data.sql b/Data/dbo.CountryCodes_Data.sql
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/Data/dbo.CountryCodes_Data.sql
diff --git a/Data/dbo.RSSFeeds_Data.sql b/Data/dbo.RSSFeeds_Data.sql
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/Data/dbo.RSSFeeds_Data.sql
diff --git a/Extended Properties/MS_Description.sql b/Extended Properties/MS_Description.sql
new file mode 100644
index 0000000..cb016f9
--- /dev/null
+++ b/Extended Properties/MS_Description.sql
@@ -0,0 +1,2 @@
+EXEC sp_addextendedproperty N'MS_Description', N'Simple Talk is a technical journal and community hub from Red Gate', NULL, NULL, NULL, NULL, NULL, NULL
+GO
diff --git a/Functions/dbo.calculateEstimateOfReadingTime.sql b/Functions/dbo.calculateEstimateOfReadingTime.sql
new file mode 100644
index 0000000..eeaa511
--- /dev/null
+++ b/Functions/dbo.calculateEstimateOfReadingTime.sql
@@ -0,0 +1,27 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+-- This is a much more accurate function
+CREATE FUNCTION [dbo].[calculateEstimateOfReadingTime] ( @value VARCHAR(MAX) )
+RETURNS INT
+    BEGIN
+        DECLARE @ret AS INT = 1 ,
+            @i AS INT = 1;
+        WHILE @i <= LEN(@value) 
+            BEGIN
+                IF SUBSTRING(@value, @i, 1) = ' ' 
+                    BEGIN
+                        SET @ret = @ret + 1;
+                    END
+                SET @i = @i + 1;
+            END  
+        RETURN @ret / 250;
+    END
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Function to estimate how long an average reader will take to read an article based on its length.
+This is infomation that will be displayed alongside the article summary on the main Simple Talk home page.
+Research indicates that an average person can read 250 words in a minute.', 'SCHEMA', N'dbo', 'FUNCTION', N'calculateEstimateOfReadingTime', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The article text', 'SCHEMA', N'dbo', 'FUNCTION', N'calculateEstimateOfReadingTime', 'PARAMETER', N'@value'
+GO
diff --git a/Functions/dbo.ntsh.sql b/Functions/dbo.ntsh.sql
new file mode 100644
index 0000000..fd563ba
--- /dev/null
+++ b/Functions/dbo.ntsh.sql
@@ -0,0 +1,26 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/* This "nothing to see here" function does nothing but slow down v_Articles */
+CREATE FUNCTION [dbo].[ntsh] (@x INT, @n INT)
+RETURNS INT
+WITH SCHEMABINDING AS
+BEGIN
+  DECLARE @retval AS INT;
+
+	DECLARE @i INT = 0
+-- Set i to 100 or greater to slow v_Articles to >100ms
+	WHILE @i < @n
+		BEGIN
+			SET @i = @i + 1;
+		END
+	SET @retval = @x;
+
+  RETURN @retval ;
+END;
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'This used to deliberately slow down the loading of the articles view, but is now deprecated.
+The inefficient version of dbo.calculateEstimateOfReadingTime function achieves the same.', 'SCHEMA', N'dbo', 'FUNCTION', N'ntsh', NULL, NULL
+GO
diff --git a/Functions/dbo.ufnGetBlogInformation.sql b/Functions/dbo.ufnGetBlogInformation.sql
new file mode 100644
index 0000000..9078f68
--- /dev/null
+++ b/Functions/dbo.ufnGetBlogInformation.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE FUNCTION [dbo].[ufnGetBlogInformation] (@Contact INT)
+RETURNS @retBlogInformation TABLE (-- Columns returned by the function
+                                   [AuthorID] INT NOT NULL,
+                                   [Title] [nvarchar](50) NULL)
+AS 
+
+BEGIN
+    INSERT  INTO @retBlogInformation
+            SELECT  AuthorID, Title
+            FROM    dbo.Blogs
+            WHERE   AuthorID=@Contact
+
+    RETURN
+END
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'This function returns a table with basic infomation pulled from the Blogs table', 'SCHEMA', N'dbo', 'FUNCTION', N'ufnGetBlogInformation', NULL, NULL
+GO
diff --git a/Functions/tSQLt.F_Num.sql b/Functions/tSQLt.F_Num.sql
new file mode 100644
index 0000000..b0d9f68
--- /dev/null
+++ b/Functions/tSQLt.F_Num.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE FUNCTION [tSQLt].[F_Num](
+       @N INT
+)
+RETURNS TABLE 
+AS 
+RETURN WITH C0(c) AS (SELECT 1 UNION ALL SELECT 1),
+            C1(c) AS (SELECT 1 FROM C0 AS A CROSS JOIN C0 AS B),
+            C2(c) AS (SELECT 1 FROM C1 AS A CROSS JOIN C1 AS B),
+            C3(c) AS (SELECT 1 FROM C2 AS A CROSS JOIN C2 AS B),
+            C4(c) AS (SELECT 1 FROM C3 AS A CROSS JOIN C3 AS B),
+            C5(c) AS (SELECT 1 FROM C4 AS A CROSS JOIN C4 AS B),
+            C6(c) AS (SELECT 1 FROM C5 AS A CROSS JOIN C5 AS B)
+       SELECT TOP(CASE WHEN @N>0 THEN @N ELSE 0 END) ROW_NUMBER() OVER (ORDER BY c) no
+         FROM C6;
+GO
diff --git a/Functions/tSQLt.GetTestResultFormatter.sql b/Functions/tSQLt.GetTestResultFormatter.sql
new file mode 100644
index 0000000..d0145f6
--- /dev/null
+++ b/Functions/tSQLt.GetTestResultFormatter.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[GetTestResultFormatter]()
+RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+    DECLARE @FormatterName NVARCHAR(MAX);
+    
+    SELECT @FormatterName = CAST(value AS NVARCHAR(MAX))
+    FROM sys.extended_properties
+    WHERE name = N'tSQLt.ResultsFormatter'
+      AND major_id = OBJECT_ID('tSQLt.Private_OutputTestResults');
+      
+    SELECT @FormatterName = COALESCE(@FormatterName, 'tSQLt.DefaultResultFormatter');
+    
+    RETURN @FormatterName;
+END;
+GO
diff --git a/Functions/tSQLt.Info.sql b/Functions/tSQLt.Info.sql
new file mode 100644
index 0000000..7bffd1c
--- /dev/null
+++ b/Functions/tSQLt.Info.sql
@@ -0,0 +1,16 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE FUNCTION [tSQLt].[Info]()
+RETURNS TABLE
+AS
+RETURN
+SELECT
+Version = '1.0.4969.33062',
+ClrVersion = (SELECT tSQLt.Private::Info());
+---Build-
+
+
+GO
diff --git a/Functions/tSQLt.Private_FindConstraint.sql b/Functions/tSQLt.Private_FindConstraint.sql
new file mode 100644
index 0000000..0c47fd1
--- /dev/null
+++ b/Functions/tSQLt.Private_FindConstraint.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_FindConstraint]
+(
+  @TableObjectId INT,
+  @ConstraintName NVARCHAR(MAX)
+)
+RETURNS TABLE
+AS
+RETURN
+  SELECT TOP(1) constraints.object_id AS ConstraintObjectId, type_desc AS ConstraintType
+    FROM sys.objects constraints
+    CROSS JOIN tSQLt.Private_GetOriginalTableInfo(@TableObjectId) orgTbl
+   WHERE @ConstraintName IN (constraints.name, QUOTENAME(constraints.name))
+     AND constraints.parent_object_id = orgTbl.OrgTableObjectId
+   ORDER BY LEN(constraints.name) ASC;
+GO
diff --git a/Functions/tSQLt.Private_GetCleanObjectName.sql b/Functions/tSQLt.Private_GetCleanObjectName.sql
new file mode 100644
index 0000000..cb1b7e1
--- /dev/null
+++ b/Functions/tSQLt.Private_GetCleanObjectName.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetCleanObjectName](@ObjectName NVARCHAR(MAX))
+RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+    RETURN (SELECT OBJECT_NAME(OBJECT_ID(@ObjectName)));
+END;
+GO
diff --git a/Functions/tSQLt.Private_GetCleanSchemaName.sql b/Functions/tSQLt.Private_GetCleanSchemaName.sql
new file mode 100644
index 0000000..8302427
--- /dev/null
+++ b/Functions/tSQLt.Private_GetCleanSchemaName.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/*******************************************************************************************/
+/*******************************************************************************************/
+/*******************************************************************************************/
+CREATE FUNCTION [tSQLt].[Private_GetCleanSchemaName](@SchemaName NVARCHAR(MAX), @ObjectName NVARCHAR(MAX))
+RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+    RETURN (SELECT SCHEMA_NAME(schema_id) 
+              FROM sys.objects 
+             WHERE object_id = CASE WHEN ISNULL(@SchemaName,'') in ('','[]')
+                                    THEN OBJECT_ID(@ObjectName)
+                                    ELSE OBJECT_ID(@SchemaName + '.' + @ObjectName)
+                                END);
+END;
+GO
diff --git a/Functions/tSQLt.Private_GetCommaSeparatedColumnList.sql b/Functions/tSQLt.Private_GetCommaSeparatedColumnList.sql
new file mode 100644
index 0000000..9cda268
--- /dev/null
+++ b/Functions/tSQLt.Private_GetCommaSeparatedColumnList.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE FUNCTION [tSQLt].[Private_GetCommaSeparatedColumnList] (@Table NVARCHAR(MAX), @ExcludeColumn NVARCHAR(MAX))
+RETURNS NVARCHAR(MAX)
+AS 
+BEGIN
+  RETURN STUFF((
+     SELECT ',' + CASE WHEN system_type_id = TYPE_ID('timestamp') THEN ';TIMESTAMP columns are unsupported!;' ELSE QUOTENAME(name) END 
+       FROM sys.columns 
+      WHERE object_id = OBJECT_ID(@Table) 
+        AND name <> @ExcludeColumn 
+      ORDER BY column_id
+     FOR XML PATH(''), TYPE).value('.','NVARCHAR(MAX)')
+    ,1, 1, '');
+        
+END;
+---BUILD-
+GO
diff --git a/Functions/tSQLt.Private_GetConstraintType.sql b/Functions/tSQLt.Private_GetConstraintType.sql
new file mode 100644
index 0000000..b331723
--- /dev/null
+++ b/Functions/tSQLt.Private_GetConstraintType.sql
@@ -0,0 +1,14 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetConstraintType](@TableObjectId INT, @ConstraintName NVARCHAR(MAX))
+RETURNS TABLE
+AS
+RETURN
+  SELECT object_id,type,type_desc
+    FROM sys.objects 
+   WHERE object_id = OBJECT_ID(SCHEMA_NAME(schema_id)+'.'+@ConstraintName)
+     AND parent_object_id = @TableObjectId;
+GO
diff --git a/Functions/tSQLt.Private_GetDataTypeOrComputedColumnDefinition.sql b/Functions/tSQLt.Private_GetDataTypeOrComputedColumnDefinition.sql
new file mode 100644
index 0000000..c7bcc62
--- /dev/null
+++ b/Functions/tSQLt.Private_GetDataTypeOrComputedColumnDefinition.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE FUNCTION [tSQLt].[Private_GetDataTypeOrComputedColumnDefinition](@UserTypeId INT, @MaxLength INT, @Precision INT, @Scale INT, @CollationName NVARCHAR(MAX), @ObjectId INT, @ColumnId INT, @ReturnDetails BIT)
+RETURNS TABLE
+AS
+RETURN SELECT 
+              COALESCE(IsComputedColumn, 0) AS IsComputedColumn,
+              COALESCE(ComputedColumnDefinition, TypeName) AS ColumnDefinition
+        FROM tSQLt.Private_GetFullTypeName(@UserTypeId, @MaxLength, @Precision, @Scale, @CollationName)
+        LEFT JOIN (SELECT 1 AS IsComputedColumn,' AS '+ definition + CASE WHEN is_persisted = 1 THEN ' PERSISTED' ELSE '' END AS ComputedColumnDefinition,object_id,column_id
+                     FROM sys.computed_columns 
+                  )cc
+               ON cc.object_id = @ObjectId
+              AND cc.column_id = @ColumnId
+              AND @ReturnDetails = 1;               
+---Build-
+GO
diff --git a/Functions/tSQLt.Private_GetDefaultConstraintDefinition.sql b/Functions/tSQLt.Private_GetDefaultConstraintDefinition.sql
new file mode 100644
index 0000000..683e1c0
--- /dev/null
+++ b/Functions/tSQLt.Private_GetDefaultConstraintDefinition.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE FUNCTION [tSQLt].[Private_GetDefaultConstraintDefinition](@ObjectId INT, @ColumnId INT, @ReturnDetails BIT)
+RETURNS TABLE
+AS
+RETURN SELECT 
+              COALESCE(IsDefault, 0) AS IsDefault,
+              COALESCE(DefaultDefinition, '') AS DefaultDefinition
+        FROM (SELECT 1) X(X)
+        LEFT JOIN (SELECT 1 AS IsDefault,' DEFAULT '+ definition AS DefaultDefinition,parent_object_id,parent_column_id
+                     FROM sys.default_constraints
+                  )dc
+               ON dc.parent_object_id = @ObjectId
+              AND dc.parent_column_id = @ColumnId
+              AND @ReturnDetails = 1;               
+---Build-
+GO
diff --git a/Functions/tSQLt.Private_GetForeignKeyDefinition.sql b/Functions/tSQLt.Private_GetForeignKeyDefinition.sql
new file mode 100644
index 0000000..05cd6bf
--- /dev/null
+++ b/Functions/tSQLt.Private_GetForeignKeyDefinition.sql
@@ -0,0 +1,43 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetForeignKeyDefinition](
+    @SchemaName NVARCHAR(MAX),
+    @ParentTableName NVARCHAR(MAX),
+    @ForeignKeyName NVARCHAR(MAX)
+)
+RETURNS TABLE
+AS
+RETURN SELECT 'CONSTRAINT ' + name + ' FOREIGN KEY (' +
+              parCols + ') REFERENCES ' + refName + '(' + refCols + ')' cmd,
+              CASE 
+                WHEN RefTableIsFakedInd = 1
+                  THEN 'CREATE UNIQUE INDEX ' + tSQLt.Private::CreateUniqueObjectName() + ' ON ' + refName + '(' + refCols + ');' 
+                ELSE '' 
+              END CreIdxCmd
+         FROM (SELECT QUOTENAME(SCHEMA_NAME(k.schema_id)) AS SchemaName,
+                      QUOTENAME(k.name) AS name,
+                      QUOTENAME(OBJECT_NAME(k.parent_object_id)) AS parName,
+                      QUOTENAME(SCHEMA_NAME(refTab.schema_id)) + '.' + QUOTENAME(refTab.name) AS refName,
+                      parCol.ColNames AS parCols,
+                      refCol.ColNames AS refCols,
+                      CASE WHEN e.name IS NULL THEN 0
+                           ELSE 1 
+                       END AS RefTableIsFakedInd
+                 FROM sys.foreign_keys k
+                 CROSS APPLY tSQLt.Private_GetForeignKeyParColumns(k.object_id) AS parCol
+                 CROSS APPLY tSQLt.Private_GetForeignKeyRefColumns(k.object_id) AS refCol
+                 LEFT JOIN sys.extended_properties e
+                   ON e.name = 'tSQLt.FakeTable_OrgTableName'
+                  AND e.value = OBJECT_NAME(k.referenced_object_id)
+                 JOIN sys.tables refTab
+                   ON COALESCE(e.major_id,k.referenced_object_id) = refTab.object_id
+                WHERE k.parent_object_id = OBJECT_ID(@SchemaName + '.' + @ParentTableName)
+                  AND k.object_id = OBJECT_ID(@SchemaName + '.' + @ForeignKeyName)
+               )x;
+---Build-
+
+
+GO
diff --git a/Functions/tSQLt.Private_GetForeignKeyParColumns.sql b/Functions/tSQLt.Private_GetForeignKeyParColumns.sql
new file mode 100644
index 0000000..0662318
--- /dev/null
+++ b/Functions/tSQLt.Private_GetForeignKeyParColumns.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE FUNCTION [tSQLt].[Private_GetForeignKeyParColumns](
+    @ConstraintObjectId INT
+)
+RETURNS TABLE
+AS
+RETURN SELECT STUFF((
+                 SELECT ','+QUOTENAME(pci.name) FROM sys.foreign_key_columns c
+                   JOIN sys.columns pci
+                   ON pci.object_id = c.parent_object_id
+                  AND pci.column_id = c.parent_column_id
+                   WHERE @ConstraintObjectId = c.constraint_object_id
+                   FOR XML PATH(''),TYPE
+                   ).value('.','NVARCHAR(MAX)'),1,1,'')  AS ColNames
+GO
diff --git a/Functions/tSQLt.Private_GetForeignKeyRefColumns.sql b/Functions/tSQLt.Private_GetForeignKeyRefColumns.sql
new file mode 100644
index 0000000..854557e
--- /dev/null
+++ b/Functions/tSQLt.Private_GetForeignKeyRefColumns.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetForeignKeyRefColumns](
+    @ConstraintObjectId INT
+)
+RETURNS TABLE
+AS
+RETURN SELECT STUFF((
+                 SELECT ','+QUOTENAME(rci.name) FROM sys.foreign_key_columns c
+                   JOIN sys.columns rci
+                  ON rci.object_id = c.referenced_object_id
+                  AND rci.column_id = c.referenced_column_id
+                   WHERE @ConstraintObjectId = c.constraint_object_id
+                   FOR XML PATH(''),TYPE
+                   ).value('.','NVARCHAR(MAX)'),1,1,'')  AS ColNames;
+GO
diff --git a/Functions/tSQLt.Private_GetFullTypeName.sql b/Functions/tSQLt.Private_GetFullTypeName.sql
new file mode 100644
index 0000000..5ef7ec0
--- /dev/null
+++ b/Functions/tSQLt.Private_GetFullTypeName.sql
@@ -0,0 +1,29 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE FUNCTION [tSQLt].[Private_GetFullTypeName](@TypeId INT, @Length INT, @Precision INT, @Scale INT, @CollationName NVARCHAR(MAX))
+RETURNS TABLE
+AS
+RETURN SELECT SchemaName + '.' + Name + Suffix + Collation AS TypeName, SchemaName, Name, Suffix
+FROM(
+  SELECT QUOTENAME(SCHEMA_NAME(schema_id)) SchemaName, QUOTENAME(name) Name,
+              CASE WHEN max_length = -1
+                    THEN ''
+                   WHEN @Length = -1
+                    THEN '(MAX)'
+                   WHEN name LIKE 'n%char'
+                    THEN '(' + CAST(@Length / 2 AS NVARCHAR) + ')'
+                   WHEN name LIKE '%char' OR name LIKE '%binary'
+                    THEN '(' + CAST(@Length AS NVARCHAR) + ')'
+                   WHEN name IN ('decimal', 'numeric')
+                    THEN '(' + CAST(@Precision AS NVARCHAR) + ',' + CAST(@Scale AS NVARCHAR) + ')'
+                   ELSE ''
+               END Suffix,
+              CASE WHEN @CollationName IS NULL THEN ''
+                   ELSE ' COLLATE ' + @CollationName
+               END Collation
+          FROM sys.types WHERE user_type_id = @TypeId
+          )X;
+---Build-
+GO
diff --git a/Functions/tSQLt.Private_GetIdentityDefinition.sql b/Functions/tSQLt.Private_GetIdentityDefinition.sql
new file mode 100644
index 0000000..f607519
--- /dev/null
+++ b/Functions/tSQLt.Private_GetIdentityDefinition.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE FUNCTION [tSQLt].[Private_GetIdentityDefinition](@ObjectId INT, @ColumnId INT, @ReturnDetails BIT)
+RETURNS TABLE
+AS
+RETURN SELECT 
+              COALESCE(IsIdentity, 0) AS IsIdentityColumn,
+              COALESCE(IdentityDefinition, '') AS IdentityDefinition
+        FROM (SELECT 1) X(X)
+        LEFT JOIN (SELECT 1 AS IsIdentity,
+                          ' IDENTITY(' + CAST(seed_value AS NVARCHAR(MAX)) + ',' + CAST(increment_value AS NVARCHAR(MAX)) + ')' AS IdentityDefinition, 
+                          object_id, 
+                          column_id
+                     FROM sys.identity_columns
+                  ) AS id
+               ON id.object_id = @ObjectId
+              AND id.column_id = @ColumnId
+              AND @ReturnDetails = 1;               
+---Build-
+GO
diff --git a/Functions/tSQLt.Private_GetLastTestNameIfNotProvided.sql b/Functions/tSQLt.Private_GetLastTestNameIfNotProvided.sql
new file mode 100644
index 0000000..1821ed6
--- /dev/null
+++ b/Functions/tSQLt.Private_GetLastTestNameIfNotProvided.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+----------------------------------------------------------------------
+CREATE FUNCTION [tSQLt].[Private_GetLastTestNameIfNotProvided](@TestName NVARCHAR(MAX))
+RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+  IF(LTRIM(ISNULL(@TestName,'')) = '')
+  BEGIN
+    SELECT @TestName = TestName 
+      FROM tSQLt.Run_LastExecution le
+      JOIN sys.dm_exec_sessions es
+        ON le.SessionId = es.session_id
+       AND le.LoginTime = es.login_time
+     WHERE es.session_id = @@SPID;
+  END
+
+  RETURN @TestName;
+END
+GO
diff --git a/Functions/tSQLt.Private_GetOriginalTableInfo.sql b/Functions/tSQLt.Private_GetOriginalTableInfo.sql
new file mode 100644
index 0000000..d14a0c0
--- /dev/null
+++ b/Functions/tSQLt.Private_GetOriginalTableInfo.sql
@@ -0,0 +1,16 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetOriginalTableInfo](@TableObjectId INT)
+RETURNS TABLE
+AS
+  RETURN SELECT CAST(value AS NVARCHAR(4000)) OrgTableName,
+                OBJECT_ID(QUOTENAME(OBJECT_SCHEMA_NAME(@TableObjectId)) + '.' + QUOTENAME(CAST(value AS NVARCHAR(4000)))) OrgTableObjectId
+    FROM sys.extended_properties
+   WHERE class_desc = 'OBJECT_OR_COLUMN'
+     AND major_id = @TableObjectId
+     AND minor_id = 0
+     AND name = 'tSQLt.FakeTable_OrgTableName';
+GO
diff --git a/Functions/tSQLt.Private_GetOriginalTableName.sql b/Functions/tSQLt.Private_GetOriginalTableName.sql
new file mode 100644
index 0000000..606a55c
--- /dev/null
+++ b/Functions/tSQLt.Private_GetOriginalTableName.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/*******************************************************************************************/
+/*******************************************************************************************/
+/*******************************************************************************************/
+CREATE FUNCTION [tSQLt].[Private_GetOriginalTableName](@SchemaName NVARCHAR(MAX), @TableName NVARCHAR(MAX)) --DELETE!!!
+RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+  RETURN (SELECT CAST(value AS NVARCHAR(4000))
+    FROM sys.extended_properties
+   WHERE class_desc = 'OBJECT_OR_COLUMN'
+     AND major_id = OBJECT_ID(@SchemaName + '.' + @TableName)
+     AND minor_id = 0
+     AND name = 'tSQLt.FakeTable_OrgTableName');
+END;
+GO
diff --git a/Functions/tSQLt.Private_GetQuotedFullName.sql b/Functions/tSQLt.Private_GetQuotedFullName.sql
new file mode 100644
index 0000000..9921b58
--- /dev/null
+++ b/Functions/tSQLt.Private_GetQuotedFullName.sql
@@ -0,0 +1,14 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetQuotedFullName](@Objectid INT)
+RETURNS NVARCHAR(517)
+AS
+BEGIN
+    DECLARE @QuotedName NVARCHAR(517);
+    SELECT @QuotedName = QUOTENAME(OBJECT_SCHEMA_NAME(@Objectid)) + '.' + QUOTENAME(OBJECT_NAME(@Objectid));
+    RETURN @QuotedName;
+END;
+GO
diff --git a/Functions/tSQLt.Private_GetQuotedTableNameForConstraint.sql b/Functions/tSQLt.Private_GetQuotedTableNameForConstraint.sql
new file mode 100644
index 0000000..bf0537f
--- /dev/null
+++ b/Functions/tSQLt.Private_GetQuotedTableNameForConstraint.sql
@@ -0,0 +1,24 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetQuotedTableNameForConstraint](@ConstraintObjectId INT)
+RETURNS TABLE
+AS
+RETURN
+  SELECT QUOTENAME(SCHEMA_NAME(newtbl.schema_id)) + '.' + QUOTENAME(OBJECT_NAME(newtbl.object_id)) QuotedTableName,
+         SCHEMA_NAME(newtbl.schema_id) SchemaName,
+         OBJECT_NAME(newtbl.object_id) TableName,
+         OBJECT_NAME(constraints.parent_object_id) OrgTableName
+      FROM sys.objects AS constraints
+      JOIN sys.extended_properties AS p
+      JOIN sys.objects AS newtbl
+        ON newtbl.object_id = p.major_id
+       AND p.minor_id = 0
+       AND p.class_desc = 'OBJECT_OR_COLUMN'
+       AND p.name = 'tSQLt.FakeTable_OrgTableName'
+        ON OBJECT_NAME(constraints.parent_object_id) = CAST(p.value AS NVARCHAR(4000))
+       AND constraints.schema_id = newtbl.schema_id
+       AND constraints.object_id = @ConstraintObjectId;
+GO
diff --git a/Functions/tSQLt.Private_GetSchemaId.sql b/Functions/tSQLt.Private_GetSchemaId.sql
new file mode 100644
index 0000000..154cd35
--- /dev/null
+++ b/Functions/tSQLt.Private_GetSchemaId.sql
@@ -0,0 +1,18 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_GetSchemaId](@SchemaName NVARCHAR(MAX))
+RETURNS INT
+AS
+BEGIN
+  RETURN (
+    SELECT TOP(1) schema_id
+      FROM sys.schemas
+     WHERE @SchemaName IN (name, QUOTENAME(name), QUOTENAME(name, '"'))
+     ORDER BY 
+        CASE WHEN name = @SchemaName THEN 0 ELSE 1 END
+  );
+END;
+GO
diff --git a/Functions/tSQLt.Private_IsTestClass.sql b/Functions/tSQLt.Private_IsTestClass.sql
new file mode 100644
index 0000000..2095e8d
--- /dev/null
+++ b/Functions/tSQLt.Private_IsTestClass.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_IsTestClass](@TestClassName NVARCHAR(MAX))
+RETURNS BIT
+AS
+BEGIN
+  RETURN 
+    CASE 
+      WHEN EXISTS(
+             SELECT 1 
+               FROM tSQLt.TestClasses
+              WHERE SchemaId = tSQLt.Private_GetSchemaId(@TestClassName)
+            )
+      THEN 1
+      ELSE 0
+    END;
+END;
+GO
diff --git a/Functions/tSQLt.Private_QuoteClassNameForNewTestClass.sql b/Functions/tSQLt.Private_QuoteClassNameForNewTestClass.sql
new file mode 100644
index 0000000..a29f178
--- /dev/null
+++ b/Functions/tSQLt.Private_QuoteClassNameForNewTestClass.sql
@@ -0,0 +1,16 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE FUNCTION [tSQLt].[Private_QuoteClassNameForNewTestClass](@ClassName NVARCHAR(MAX))
+  RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+  RETURN 
+    CASE WHEN @ClassName LIKE '[[]%]' THEN @ClassName
+         ELSE QUOTENAME(@ClassName)
+     END;
+END;
+---Build-
+GO
diff --git a/Functions/tSQLt.Private_ResolveApplyConstraintParameters.sql b/Functions/tSQLt.Private_ResolveApplyConstraintParameters.sql
new file mode 100644
index 0000000..3d85a3d
--- /dev/null
+++ b/Functions/tSQLt.Private_ResolveApplyConstraintParameters.sql
@@ -0,0 +1,24 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_ResolveApplyConstraintParameters]
+(
+  @A NVARCHAR(MAX),
+  @B NVARCHAR(MAX),
+  @C NVARCHAR(MAX)
+)
+RETURNS TABLE
+AS 
+RETURN
+  SELECT ConstraintObjectId, ConstraintType
+    FROM tSQLt.Private_FindConstraint(OBJECT_ID(@A), @B)
+   WHERE @C IS NULL
+   UNION ALL
+  SELECT *
+    FROM tSQLt.Private_FindConstraint(OBJECT_ID(@A + '.' + @B), @C)
+   UNION ALL
+  SELECT *
+    FROM tSQLt.Private_FindConstraint(OBJECT_ID(@C + '.' + @A), @B);
+GO
diff --git a/Functions/tSQLt.Private_ResolveFakeTableNamesForBackwardCompatibility.sql b/Functions/tSQLt.Private_ResolveFakeTableNamesForBackwardCompatibility.sql
new file mode 100644
index 0000000..c4e166e
--- /dev/null
+++ b/Functions/tSQLt.Private_ResolveFakeTableNamesForBackwardCompatibility.sql
@@ -0,0 +1,17 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_ResolveFakeTableNamesForBackwardCompatibility] 
+ (@TableName NVARCHAR(MAX), @SchemaName NVARCHAR(MAX))
+RETURNS TABLE AS 
+RETURN
+  SELECT QUOTENAME(OBJECT_SCHEMA_NAME(object_id)) AS CleanSchemaName,
+         QUOTENAME(OBJECT_NAME(object_id)) AS CleanTableName
+     FROM (SELECT CASE
+                    WHEN @SchemaName IS NULL THEN OBJECT_ID(@TableName)
+                    ELSE COALESCE(OBJECT_ID(@SchemaName + '.' + @TableName),OBJECT_ID(@TableName + '.' + @SchemaName)) 
+                  END object_id
+          ) ids;
+GO
diff --git a/Functions/tSQLt.Private_ResolveName.sql b/Functions/tSQLt.Private_ResolveName.sql
new file mode 100644
index 0000000..6b76da8
--- /dev/null
+++ b/Functions/tSQLt.Private_ResolveName.sql
@@ -0,0 +1,24 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_ResolveName](@Name NVARCHAR(MAX))
+RETURNS TABLE 
+AS
+RETURN
+  WITH resolvedNames(ord, schemaId, objectId, quotedSchemaName, quotedObjectName, quotedFullName, isTestClass, isTestCase, isSchema) AS
+  (SELECT 1, schemaId, NULL, quotedSchemaName, NULL, quotedSchemaName, isTestClass, 0, 1
+     FROM tSQLt.Private_ResolveSchemaName(@Name)
+    UNION ALL
+   SELECT 2, schemaId, objectId, quotedSchemaName, quotedObjectName, quotedFullName, 0, isTestCase, 0
+     FROM tSQLt.Private_ResolveObjectName(@Name)
+    UNION ALL
+   SELECT 3, NULL, NULL, NULL, NULL, NULL, 0, 0, 0
+   )
+   SELECT TOP(1) schemaId, objectId, quotedSchemaName, quotedObjectName, quotedFullName, isTestClass, isTestCase, isSchema
+     FROM resolvedNames
+    WHERE schemaId IS NOT NULL 
+       OR ord = 3
+    ORDER BY ord
+GO
diff --git a/Functions/tSQLt.Private_ResolveObjectName.sql b/Functions/tSQLt.Private_ResolveObjectName.sql
new file mode 100644
index 0000000..27ce239
--- /dev/null
+++ b/Functions/tSQLt.Private_ResolveObjectName.sql
@@ -0,0 +1,30 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_ResolveObjectName](@Name NVARCHAR(MAX))
+RETURNS TABLE 
+AS
+RETURN
+  WITH ids(schemaId, objectId) AS
+       (SELECT SCHEMA_ID(OBJECT_SCHEMA_NAME(OBJECT_ID(@Name))),
+               OBJECT_ID(@Name)
+       ),
+       idsWithNames(schemaId, objectId, quotedSchemaName, quotedObjectName) AS
+        (SELECT schemaId, objectId,
+         QUOTENAME(SCHEMA_NAME(schemaId)) AS quotedSchemaName, 
+         QUOTENAME(OBJECT_NAME(objectId)) AS quotedObjectName
+         FROM ids
+        )
+  SELECT schemaId, 
+         objectId, 
+         quotedSchemaName,
+         quotedObjectName,
+         quotedSchemaName + '.' + quotedObjectName AS quotedFullName, 
+         CASE WHEN LOWER(quotedObjectName) LIKE '[[]test%]' 
+               AND objectId = OBJECT_ID(quotedSchemaName + '.' + quotedObjectName,'P') 
+              THEN 1 ELSE 0 END AS isTestCase
+    FROM idsWithNames;
+    
+GO
diff --git a/Functions/tSQLt.Private_ResolveSchemaName.sql b/Functions/tSQLt.Private_ResolveSchemaName.sql
new file mode 100644
index 0000000..5e3b43a
--- /dev/null
+++ b/Functions/tSQLt.Private_ResolveSchemaName.sql
@@ -0,0 +1,26 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE FUNCTION [tSQLt].[Private_ResolveSchemaName](@Name NVARCHAR(MAX))
+RETURNS TABLE 
+AS
+RETURN
+  WITH ids(schemaId) AS
+       (SELECT tSQLt.Private_GetSchemaId(@Name)
+       ),
+       idsWithNames(schemaId, quotedSchemaName) AS
+        (SELECT schemaId,
+         QUOTENAME(SCHEMA_NAME(schemaId))
+         FROM ids
+        )
+  SELECT schemaId, 
+         quotedSchemaName,
+         CASE WHEN EXISTS(SELECT 1 FROM tSQLt.TestClasses WHERE TestClasses.SchemaId = idsWithNames.schemaId)
+               THEN 1
+              ELSE 0
+         END AS isTestClass, 
+         CASE WHEN schemaId IS NOT NULL THEN 1 ELSE 0 END AS isSchema
+    FROM idsWithNames;
+GO
diff --git a/Functions/tSQLt.Private_SqlVariantFormatter.sql b/Functions/tSQLt.Private_SqlVariantFormatter.sql
new file mode 100644
index 0000000..af0e7b6
--- /dev/null
+++ b/Functions/tSQLt.Private_SqlVariantFormatter.sql
@@ -0,0 +1,27 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE FUNCTION [tSQLt].[Private_SqlVariantFormatter](@Value SQL_VARIANT)
+RETURNS NVARCHAR(MAX)
+AS
+BEGIN
+  RETURN CASE UPPER(CAST(SQL_VARIANT_PROPERTY(@Value,'BaseType')AS sysname))
+           WHEN 'FLOAT' THEN CONVERT(NVARCHAR(MAX),@Value,2)
+           WHEN 'REAL' THEN CONVERT(NVARCHAR(MAX),@Value,1)
+           WHEN 'MONEY' THEN CONVERT(NVARCHAR(MAX),@Value,2)
+           WHEN 'SMALLMONEY' THEN CONVERT(NVARCHAR(MAX),@Value,2)
+           WHEN 'DATE' THEN CONVERT(NVARCHAR(MAX),@Value,126)
+           WHEN 'DATETIME' THEN CONVERT(NVARCHAR(MAX),@Value,126)
+           WHEN 'DATETIME2' THEN CONVERT(NVARCHAR(MAX),@Value,126)
+           WHEN 'DATETIMEOFFSET' THEN CONVERT(NVARCHAR(MAX),@Value,126)
+           WHEN 'SMALLDATETIME' THEN CONVERT(NVARCHAR(MAX),@Value,126)
+           WHEN 'TIME' THEN CONVERT(NVARCHAR(MAX),@Value,126)
+           WHEN 'BINARY' THEN CONVERT(NVARCHAR(MAX),@Value,1)
+           WHEN 'VARBINARY' THEN CONVERT(NVARCHAR(MAX),@Value,1)
+           ELSE CAST(@Value AS NVARCHAR(MAX))
+         END;
+END
+---Build-
+GO
diff --git a/Functions/tSQLt.TestCaseSummary.sql b/Functions/tSQLt.TestCaseSummary.sql
new file mode 100644
index 0000000..b7f7401
--- /dev/null
+++ b/Functions/tSQLt.TestCaseSummary.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE FUNCTION [tSQLt].[TestCaseSummary]()
+RETURNS TABLE
+AS
+RETURN WITH A(Cnt, SuccessCnt, FailCnt, ErrorCnt) AS (
+                SELECT COUNT(1),
+                       ISNULL(SUM(CASE WHEN Result = 'Success' THEN 1 ELSE 0 END), 0),
+                       ISNULL(SUM(CASE WHEN Result = 'Failure' THEN 1 ELSE 0 END), 0),
+                       ISNULL(SUM(CASE WHEN Result = 'Error' THEN 1 ELSE 0 END), 0)
+                  FROM tSQLt.TestResult
+                  
+                )
+       SELECT 'Test Case Summary: ' + CAST(Cnt AS NVARCHAR) + ' test case(s) executed, '+
+                  CAST(SuccessCnt AS NVARCHAR) + ' succeeded, '+
+                  CAST(FailCnt AS NVARCHAR) + ' failed, '+
+                  CAST(ErrorCnt AS NVARCHAR) + ' errored.' Msg,*
+         FROM A;
+GO
diff --git a/RedGateDatabaseInfo.xml b/RedGateDatabaseInfo.xml
new file mode 100644
index 0000000..a2aaa37
--- /dev/null
+++ b/RedGateDatabaseInfo.xml
@@ -0,0 +1,64 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<DatabaseInformation Version="2">
+  <ScriptFileEncoding>UTF8</ScriptFileEncoding>
+  <DefaultCollation>SQL_Latin1_General_CP1_CI_AS</DefaultCollation>
+  <DefaultSchema>dbo</DefaultSchema>
+  <DefaultUser>dbo</DefaultUser>
+  <DefaultFilegroup>PRIMARY</DefaultFilegroup>
+  <DatabaseVersion>11</DatabaseVersion>
+  <IsAzure>False</IsAzure>
+  <MaxDataFileSize>10485760</MaxDataFileSize>
+  <WriteToFileOptions>
+    <Prefixes>
+      <None>
+      </None>
+      <Table>Tables</Table>
+      <StoredProcedure>Stored Procedures</StoredProcedure>
+      <View>Views</View>
+      <Default>Defaults</Default>
+      <FullTextCatalog>Storage\Full Text Catalogs</FullTextCatalog>
+      <Function>Functions</Function>
+      <Role>Security\Roles</Role>
+      <Rule>Rules</Rule>
+      <User>Security\Users</User>
+      <UserDefinedType>Types\User-defined Data Types</UserDefinedType>
+      <Trigger>
+      </Trigger>
+      <DdlTrigger>Database Triggers</DdlTrigger>
+      <Assembly>Assemblies</Assembly>
+      <Synonym>Synonyms</Synonym>
+      <XmlSchemaCollection>Types\XML Schema Collections</XmlSchemaCollection>
+      <MessageType>Service Broker\Message Types</MessageType>
+      <Contract>Service Broker\Contracts</Contract>
+      <Queue>Service Broker\Queues</Queue>
+      <Service>Service Broker\Services</Service>
+      <Route>Service Broker\Routes</Route>
+      <EventNotification>Service Broker\Event Notifications</EventNotification>
+      <PartitionScheme>Storage\Partition Schemes</PartitionScheme>
+      <PartitionFunction>Storage\Partition Functions</PartitionFunction>
+      <Field>
+      </Field>
+      <Index>
+      </Index>
+      <Schema>Security\Schemas</Schema>
+      <ServiceBinding>Service Broker\Remote Service Bindings</ServiceBinding>
+      <Certificate>Security\Certificates</Certificate>
+      <SymmetricKey>Security\Symmetric Keys</SymmetricKey>
+      <AsymmetricKey>Security\Asymmetric Keys</AsymmetricKey>
+      <CheckConstraint>
+      </CheckConstraint>
+      <FullTextStoplist>Storage\Full Text Stoplists</FullTextStoplist>
+      <ExtendedProperty>Extended Properties</ExtendedProperty>
+      <Data>Data</Data>
+      <Sequence>Sequences</Sequence>
+      <SearchPropertyList>Search Property Lists</SearchPropertyList>
+      <SecurityPolicy>Security Policies</SecurityPolicy>
+    </Prefixes>
+    <DataWriteAllFilesInOneDirectory>True</DataWriteAllFilesInOneDirectory>
+  </WriteToFileOptions>
+  <DataFileSet>
+    <Count>2</Count>
+    <DataFile>dbo.CountryCodes_Data.sql</DataFile>
+    <DataFile>dbo.RSSFeeds_Data.sql</DataFile>
+  </DataFileSet>
+</DatabaseInformation>
\ No newline at end of file
diff --git a/Security/Roles/sqlrelayuser.sql b/Security/Roles/sqlrelayuser.sql
new file mode 100644
index 0000000..16f2c6f
--- /dev/null
+++ b/Security/Roles/sqlrelayuser.sql
@@ -0,0 +1,3 @@
+CREATE ROLE [sqlrelayuser]
+AUTHORIZATION [dbo]
+GO
diff --git a/Security/Schemas/SQLCop.sql b/Security/Schemas/SQLCop.sql
new file mode 100644
index 0000000..ae686fb
--- /dev/null
+++ b/Security/Schemas/SQLCop.sql
@@ -0,0 +1,7 @@
+CREATE SCHEMA [SQLCop]
+AUTHORIZATION [dbo]
+GO
+DECLARE @xp int
+SELECT @xp=1
+EXEC sp_addextendedproperty N'tSQLt.TestClass', @xp, 'SCHEMA', N'SQLCop', NULL, NULL, NULL, NULL
+GO
diff --git a/Security/Schemas/UnitTests.sql b/Security/Schemas/UnitTests.sql
new file mode 100644
index 0000000..811d707
--- /dev/null
+++ b/Security/Schemas/UnitTests.sql
@@ -0,0 +1,7 @@
+CREATE SCHEMA [UnitTests]
+AUTHORIZATION [dbo]
+GO
+DECLARE @xp int
+SELECT @xp=1
+EXEC sp_addextendedproperty N'tSQLt.TestClass', @xp, 'SCHEMA', N'UnitTests', NULL, NULL, NULL, NULL
+GO
diff --git a/Security/Schemas/tArticles.sql b/Security/Schemas/tArticles.sql
new file mode 100644
index 0000000..d0c3bd5
--- /dev/null
+++ b/Security/Schemas/tArticles.sql
@@ -0,0 +1,7 @@
+CREATE SCHEMA [tArticles]
+AUTHORIZATION [dbo]
+GO
+DECLARE @xp int
+SELECT @xp=1
+EXEC sp_addextendedproperty N'tSQLt.TestClass', @xp, 'SCHEMA', N'tArticles', NULL, NULL, NULL, NULL
+GO
diff --git a/Security/Schemas/tSQLt.sql b/Security/Schemas/tSQLt.sql
new file mode 100644
index 0000000..2bacf56
--- /dev/null
+++ b/Security/Schemas/tSQLt.sql
@@ -0,0 +1,3 @@
+CREATE SCHEMA [tSQLt]
+AUTHORIZATION [dbo]
+GO
diff --git a/Stored Procedures/SQLCop.test Decimal Size Problem.sql b/Stored Procedures/SQLCop.test Decimal Size Problem.sql
new file mode 100644
index 0000000..da20938
--- /dev/null
+++ b/Stored Procedures/SQLCop.test Decimal Size Problem.sql
@@ -0,0 +1,45 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/* Adding the SQLCop tSQLt tests*/
+CREATE PROCEDURE [SQLCop].[test Decimal Size Problem]
+AS
+BEGIN
+    -- Written by George Mastros
+    -- February 25, 2012
+    -- http://sqlcop.lessthandot.com
+    -- http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/always-include-precision-and-scale-with
+
+    SET NOCOUNT ON  
+
+    Declare @Output VarChar(max)
+    Set @Output = ''
+
+    Select @Output = @Output + Schema_Name(schema_id) + '.' + name + Char(13) + Char(10)
+    From	sys.objects
+    WHERE	schema_id <> Schema_ID('SQLCop')
+            And schema_id <> Schema_Id('tSQLt')
+            and (
+            REPLACE(REPLACE(Object_Definition(object_id), ' ', ''), 'decimal]','decimal') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%decimal[^(]%'
+            Or REPLACE(REPLACE(Object_Definition(object_id), ' ', ''), 'numeric]','numeric') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE '%[^i][^s]numeric[^(]%'
+            )
+    Order By Schema_Name(schema_id), name  
+
+    If @Output > '' 
+        Begin
+            Set @Output = Char(13) + Char(10) 
+                          + 'For more information:  '
+                          + 'http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/always-include-precision-and-scale-with'
+                          + Char(13) + Char(10) 
+                          + Char(13) + Char(10) 
+                          + @Output
+            EXEC tSQLt.Fail @Output
+        End  
+END;
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/always-include-precision-and-scale-with', 'SCHEMA', N'SQLCop', 'PROCEDURE', N'test Decimal Size Problem', NULL, NULL
+GO
diff --git a/Stored Procedures/SQLCop.test Procedures Named SP_.sql b/Stored Procedures/SQLCop.test Procedures Named SP_.sql
new file mode 100644
index 0000000..d29aeb8
--- /dev/null
+++ b/Stored Procedures/SQLCop.test Procedures Named SP_.sql
@@ -0,0 +1,40 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [SQLCop].[test Procedures Named SP_]
+AS
+BEGIN
+    -- Written by George Mastros
+    -- February 25, 2012
+    -- http://sqlcop.lessthandot.com
+    -- http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/don-t-start-your-procedures-with-sp_
+    
+    SET NOCOUNT ON
+    
+    Declare @Output VarChar(max)
+    Set @Output = ''
+  
+    SELECT	@Output = @Output + SPECIFIC_SCHEMA + '.' + SPECIFIC_NAME + Char(13) + Char(10)
+    From	INFORMATION_SCHEMA.ROUTINES
+    Where	SPECIFIC_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI LIKE 'sp[_]%'
+            And SPECIFIC_NAME COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI NOT LIKE '%diagram%'
+            AND ROUTINE_SCHEMA <> 'tSQLt'
+    Order By SPECIFIC_SCHEMA,SPECIFIC_NAME
+
+    If @Output > '' 
+        Begin
+            Set @Output = Char(13) + Char(10) 
+                          + 'For more information:  '
+                          + 'http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/don-t-start-your-procedures-with-sp_'
+                          + Char(13) + Char(10) 
+                          + Char(13) + Char(10) 
+                          + @Output
+            EXEC tSQLt.Fail @Output
+        End 
+END;
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'http://blogs.lessthandot.com/index.php/DataMgmt/DBProgramming/MSSQLServer/don-t-start-your-procedures-with-sp_', 'SCHEMA', N'SQLCop', 'PROCEDURE', N'test Procedures Named SP_', NULL, NULL
+GO
diff --git a/Stored Procedures/SQLCop.test Procedures With SET ROWCOUNT.sql b/Stored Procedures/SQLCop.test Procedures With SET ROWCOUNT.sql
new file mode 100644
index 0000000..7ec41a9
--- /dev/null
+++ b/Stored Procedures/SQLCop.test Procedures With SET ROWCOUNT.sql
@@ -0,0 +1,43 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [SQLCop].[test Procedures With SET ROWCOUNT]
+AS
+BEGIN
+    -- Written by George Mastros
+    -- February 25, 2012
+    -- http://sqlcop.lessthandot.com
+    -- http://sqltips.wordpress.com/2007/08/19/set-rowcount-will-not-be-supported-in-future-version-of-sql-server/
+
+    SET NOCOUNT ON
+
+    Declare @Output VarChar(max)
+    Set @Output = ''
+
+    SELECT	@Output = @Output + Schema_Name(schema_id) + '.' + name + Char(13) + Char(10)
+    From	sys.all_objects
+    Where	type = 'P'
+            AND name Not In('sp_helpdiagrams','sp_upgraddiagrams','sp_creatediagram','testProcedures With SET ROWCOUNT')
+            And Replace(Object_Definition(Object_id), ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%SET ROWCOUNT%'
+            And is_ms_shipped = 0
+            and schema_id <> Schema_id('tSQLt')
+            and schema_id <> Schema_id('SQLCop')			
+    ORDER BY Schema_Name(schema_id) + '.' + name
+
+    If @Output > '' 
+        Begin
+            Set @Output = Char(13) + Char(10) 
+                          + 'For more information:  '
+                          + 'http://sqltips.wordpress.com/2007/08/19/set-rowcount-will-not-be-supported-in-future-version-of-sql-server/'
+                          + Char(13) + Char(10) 
+                          + Char(13) + Char(10) 
+                          + @Output
+            EXEC tSQLt.Fail @Output
+        End
+END;
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'http://sqltips.wordpress.com/2007/08/19/set-rowcount-will-not-be-supported-in-future-version-of-sql-server/', 'SCHEMA', N'SQLCop', 'PROCEDURE', N'test Procedures With SET ROWCOUNT', NULL, NULL
+GO
diff --git a/Stored Procedures/SQLCop.test Procedures using dynamic SQL without sp_executesql.sql b/Stored Procedures/SQLCop.test Procedures using dynamic SQL without sp_executesql.sql
new file mode 100644
index 0000000..a4dc1b8
--- /dev/null
+++ b/Stored Procedures/SQLCop.test Procedures using dynamic SQL without sp_executesql.sql
@@ -0,0 +1,48 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [SQLCop].[test Procedures using dynamic SQL without sp_executesql]
+AS
+BEGIN
+	-- Written by George Mastros
+	-- February 25, 2012
+	-- http://sqlcop.lessthandot.com
+	-- http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/avoid-conversions-in-execution-plans-by-
+	
+	SET NOCOUNT ON
+	
+	Declare @Output VarChar(max)
+	Set @Output = ''
+
+	SELECT	@Output = @Output + SCHEMA_NAME(so.uid) + '.' + so.name + Char(13) + Char(10)
+	From	sys.sql_modules sm
+			Inner Join sys.sysobjects so
+				On  sm.object_id = so.id
+				And so.type = 'P'
+	Where	so.uid <> Schema_Id('tSQLt')
+			And so.uid <> Schema_Id('SQLCop')
+			And Replace(sm.definition, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%Exec(%'
+			And Replace(sm.definition, ' ', '') COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Not Like '%sp_Executesql%'
+			And OBJECTPROPERTY(so.id, N'IsMSShipped') = 0
+	Order By SCHEMA_NAME(so.uid),so.name
+
+	If @Output > '' 
+		Begin
+			Set @Output = Char(13) + Char(10) 
+						  + 'For more information:  '
+						  + 'http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/avoid-conversions-in-execution-plans-by-'
+						  + Char(13) + Char(10) 
+						  + Char(13) + Char(10) 
+						  + @Output
+			EXEC tSQLt.Fail @Output
+		End
+ 
+END;
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'http://blogs.lessthandot.com/index.php/DataMgmt/DataDesign/avoid-conversions-in-execution-plans-by-', 'SCHEMA', N'SQLCop', 'PROCEDURE', N'test Procedures using dynamic SQL without sp_executesql', NULL, NULL
+GO
diff --git a/Stored Procedures/SQLCop.test Procedures with Identity.sql b/Stored Procedures/SQLCop.test Procedures with Identity.sql
new file mode 100644
index 0000000..c05fbdd
--- /dev/null
+++ b/Stored Procedures/SQLCop.test Procedures with Identity.sql
@@ -0,0 +1,46 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [SQLCop].[test Procedures with Identity]
+AS
+BEGIN
+	-- Written by George Mastros
+	-- February 25, 2012
+	-- http://sqlcop.lessthandot.com
+	-- http://wiki.lessthandot.com/index.php/6_Different_Ways_To_Get_The_Current_Identity_Value
+	
+	SET NOCOUNT ON
+
+	Declare @Output VarChar(max)
+	Set @Output = ''
+
+	Select	@Output = @Output + Schema_Name(schema_id) + '.' + name + Char(13) + Char(10)
+	From	sys.all_objects
+	Where	type = 'P'
+			AND name Not In('sp_helpdiagrams','sp_upgraddiagrams','sp_creatediagram','testProcedures with @@Identity')
+			And Object_Definition(object_id) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AI Like '%@@identity%'
+			And is_ms_shipped = 0
+			and schema_id <> Schema_id('tSQLt')
+			and schema_id <> Schema_id('SQLCop')
+	ORDER BY Schema_Name(schema_id), name 
+
+	If @Output > '' 
+		Begin
+			Set @Output = Char(13) + Char(10) 
+						  + 'For more information:  '
+						  + 'http://wiki.lessthandot.com/index.php/6_Different_Ways_To_Get_The_Current_Identity_Value'
+						  + Char(13) + Char(10) 
+						  + Char(13) + Char(10) 
+						  + @Output
+			EXEC tSQLt.Fail @Output
+		End
+	
+END;
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'http://wiki.lessthandot.com/index.php/6_Different_Ways_To_Get_The_Current_Identity_Value', 'SCHEMA', N'SQLCop', 'PROCEDURE', N'test Procedures with Identity', NULL, NULL
+GO
diff --git a/Stored Procedures/UnitTests.test Email in prcAddContact.sql b/Stored Procedures/UnitTests.test Email in prcAddContact.sql
new file mode 100644
index 0000000..00c2120
--- /dev/null
+++ b/Stored Procedures/UnitTests.test Email in prcAddContact.sql
@@ -0,0 +1,26 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [UnitTests].[test Email in prcAddContact]
+AS
+BEGIN
+-- Create a fake table
+EXEC tSQLt.FakeTable 'dbo.Contacts';
+
+-- Populate a record using the procedure I'm testing
+EXEC [prcAddContact]
+@ContactFullName = 'David Atkinson',
+@Email = 'sql.in.the.city@red-gate.com';
+
+-- Specify the actual results
+DECLARE @ActualEmail CHAR(30);
+SET @ActualEmail = (SELECT Email FROM dbo.Contacts);
+
+-- Verify that the actual results corresponds to the expected results
+EXEC tSQLt.AssertEquals @Expected = 'sql.in.the.city@red-gate.com', @Actual = @ActualEmail;
+END;
+
+GO
diff --git a/Stored Procedures/dbo.GetScheduledArticles.sql b/Stored Procedures/dbo.GetScheduledArticles.sql
new file mode 100644
index 0000000..34478b3
--- /dev/null
+++ b/Stored Procedures/dbo.GetScheduledArticles.sql
@@ -0,0 +1,29 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+--SET QUOTED_IDENTIFIER ON|OFF
+--SET ANSI_NULLS ON|OFF
+CREATE PROCEDURE [dbo].[GetScheduledArticles]
+  @publicationdate DATETIME =null
+AS
+
+  IF @publicationdate IS NULL
+    SELECT @publicationdate = GETDATE()
+ SELECT a.ArticlesID,
+        a.Title,
+        a.[Description],
+        a.URL,
+        ars.publicationdate,
+          c.ContactFullName,
+          c.Photo
+  FROM dbo.Articles a
+  INNER JOIN dbo.ArticleSchedule ars
+   ON a.ArticlesID = ars.articledid
+   INNER JOIN dbo.ArticleAuthors aa
+    ON a.ArticlesID = aa.articleid
+	INNER JOIN dbo.Contacts c ON c.ContactsID = aa.contactid
+  WHERE ars.publicationdate < @publicationdate
+
+
+GO
diff --git a/Stored Procedures/dbo.MyGirHubDemoProc.sql b/Stored Procedures/dbo.MyGirHubDemoProc.sql
new file mode 100644
index 0000000..c831b35
--- /dev/null
+++ b/Stored Procedures/dbo.MyGirHubDemoProc.sql
@@ -0,0 +1,13 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+--SET QUOTED_IDENTIFIER ON|OFF
+--SET ANSI_NULLS ON|OFF
+--GO
+CREATE PROCEDURE [dbo].[MyGirHubDemoProc]
+AS
+SELECT top 10
+  *
+ FROM dbo.ArticleAuthors AS aa
+GO
diff --git a/Stored Procedures/dbo.aaReallyNewProc.sql b/Stored Procedures/dbo.aaReallyNewProc.sql
new file mode 100644
index 0000000..54d8a66
--- /dev/null
+++ b/Stored Procedures/dbo.aaReallyNewProc.sql
@@ -0,0 +1,11 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+--SET QUOTED_IDENTIFIER ON|OFF
+--SET ANSI_NULLS ON|OFF
+
+CREATE PROCEDURE [dbo].[aaReallyNewProc]	
+AS
+SELECT 1
+GO
diff --git a/Stored Procedures/dbo.mynewproc.sql b/Stored Procedures/dbo.mynewproc.sql
new file mode 100644
index 0000000..ce01bd4
--- /dev/null
+++ b/Stored Procedures/dbo.mynewproc.sql
@@ -0,0 +1,11 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROC [dbo].[mynewproc]
+AS
+BEGIN
+    SELECT id
+         , secondif FROM dbo.SQlinthecity7
+END
+GO
diff --git a/Stored Procedures/dbo.mytest7.sql b/Stored Procedures/dbo.mytest7.sql
new file mode 100644
index 0000000..c32330f
--- /dev/null
+++ b/Stored Procedures/dbo.mytest7.sql
@@ -0,0 +1,9 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROC [dbo].[mytest7] AS SELECT top 20
+                        * FROM  dbo.ArticleAuthors
+                        
+                        -- get data from dbo.ArticleAuthors
+GO
diff --git a/Stored Procedures/dbo.prcAddBlog.sql b/Stored Procedures/dbo.prcAddBlog.sql
new file mode 100644
index 0000000..3f2b0f2
--- /dev/null
+++ b/Stored Procedures/dbo.prcAddBlog.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [dbo].[prcAddBlog]
+    @Author VARCHAR(30),
+    @Title VARCHAR(142) = NULL,
+    @Article VARCHAR(MAX) = NULL
+    WITH EXECUTE AS CALLER
+AS
+BEGIN
+
+    INSERT  INTO dbo.Blogs (AuthorID, Title, Article, PublishDate)
+    VALUES  (@Author, @Title, @Article, GETDATE())
+        
+        
+END;
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Procedure to add a new blog post to Simple Talk', 'SCHEMA', N'dbo', 'PROCEDURE', N'prcAddBlog', NULL, NULL
+GO
diff --git a/Stored Procedures/dbo.prcAddContact.sql b/Stored Procedures/dbo.prcAddContact.sql
new file mode 100644
index 0000000..8ca2f11
--- /dev/null
+++ b/Stored Procedures/dbo.prcAddContact.sql
@@ -0,0 +1,52 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+/* 
+Sample execution: 
+EXEC [prcAddContact] 'david', '12345', '23456', '152 Riverside Place', 'Cambridge', '', 'feedback@red-gate.com', NULL
+*/
+
+CREATE PROCEDURE [dbo].[prcAddContact]   @ContactFullName VARCHAR(30),
+										 @PhoneWork VARCHAR(30) = NULL,
+										 @PhoneMobile VARCHAR(30) = NULL,
+										 @Address1 VARCHAR(30) = NULL,
+										 @Address2 VARCHAR(30) = NULL,
+										 @Address3 VARCHAR(30) = NULL,
+										 @Email VARCHAR(30) = NULL,
+										 @JoiningDate DATETIME = NULL
+
+WITH EXECUTE AS CALLER
+AS
+BEGIN
+
+INSERT INTO dbo.Contacts
+        ( ContactFullName ,
+          PhoneWork ,
+          PhoneMobile ,
+          Address1 ,
+          Address2 ,
+          Address3 ,
+          JoiningDate ,
+          ModifiedDate ,
+          Email
+        )
+VALUES  ( @ContactFullName , -- ContactFullName - nvarchar(100)
+         @PhoneWork , -- PhoneWork - nvarchar(25)
+         @PhoneMobile , -- PhoneMobile - nvarchar(25)
+         @Address1 , -- Address1 - nvarchar(128)
+         @Address2 , -- Address2 - nvarchar(128)
+         @Address3 , -- Address3 - nvarchar(128)
+          @JoiningDate , -- JoiningDate - datetime, e.g. '2012-01-17 11:42:45' 
+          GETDATE() , -- ModifiedDate - datetime
+          @Email  -- Email - nvarchar(256)
+        )
+        
+        
+        END;
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Add a new contact to the Simple Talk community', 'SCHEMA', N'dbo', 'PROCEDURE', N'prcAddContact', NULL, NULL
+GO
diff --git a/Stored Procedures/dbo.prcGetContacts.sql b/Stored Procedures/dbo.prcGetContacts.sql
new file mode 100644
index 0000000..e342d6e
--- /dev/null
+++ b/Stored Procedures/dbo.prcGetContacts.sql
@@ -0,0 +1,29 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [dbo].[prcGetContacts] @contactid INT = NULL
+AS
+SET NOCOUNT on
+    IF @contactid IS NOT NULL
+        SELECT  ContactsID
+              , 'SQLRelayFullName' AS ContactFullName
+              , 'datechanged' = ModifiedDate
+              , Email
+              , LinkedIn, Address1, Address2, Address3
+              , CountryCode
+              , 'LogDate' = GETDATE()
+            FROM Contacts
+    ELSE
+        SELECT ContactsID,
+                ContactFullName,
+                ModifiedDate,
+                Email,
+                Photo,
+                LinkedIn,Address1, Address2, address3 
+                CountryCode, 'Logdate' = getdate()
+            FROM dbo.Contacts
+            WHERE ContactsID = @contactid
+			AND CountryCode = 'USA'
+
+GO
diff --git a/Stored Procedures/dbo.prcProcedureWithDynamicSQL.sql b/Stored Procedures/dbo.prcProcedureWithDynamicSQL.sql
new file mode 100644
index 0000000..861c57f
--- /dev/null
+++ b/Stored Procedures/dbo.prcProcedureWithDynamicSQL.sql
@@ -0,0 +1,18 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+/* This is a procedure that simply contains dynamic SQL just to demonstrate that dependencies aren't picked up. 
+Use SQL Search to find these. */
+CREATE PROCEDURE [dbo].[prcProcedureWithDynamicSQL]
+AS 
+    BEGIN
+
+        EXECUTE  ('SELECT count(*) FROM Contacts WHERE ContactFullName LIKE ''D%''')
+    END
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'This serves no purpose except to demonstrate that SQL Search can find object names referenced in dynamic SQL, whereas other methods and tools can''t.', 'SCHEMA', N'dbo', 'PROCEDURE', N'prcProcedureWithDynamicSQL', NULL, NULL
+GO
diff --git a/Stored Procedures/dbo.spAddNewUser.sql b/Stored Procedures/dbo.spAddNewUser.sql
new file mode 100644
index 0000000..32066d7
--- /dev/null
+++ b/Stored Procedures/dbo.spAddNewUser.sql
@@ -0,0 +1,25 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [dbo].[spAddNewUser]
+  @username VARCHAR(200) = NULL
+  , @pwd VARBINARY(max)
+  , @active TINYINT
+AS
+ SET NOCOUNT ON 
+ DECLARE @id int
+    IF @username IS NULL 
+      RAISERROR('Username parameter is required', 12, 1);
+	ELSE
+	  INSERT dbo.Users
+	          ( username ,pwd ,active )
+	  VALUES  ( @username
+	            , @pwd
+	            , @active
+	            ) 
+  SELECT @id = @@IDENTITY
+  RETURN @id
+
+
+GO
diff --git a/Stored Procedures/dbo.spArticleGetHeader.sql b/Stored Procedures/dbo.spArticleGetHeader.sql
new file mode 100644
index 0000000..9fcb583
--- /dev/null
+++ b/Stored Procedures/dbo.spArticleGetHeader.sql
@@ -0,0 +1,33 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [dbo].[spArticleGetHeader] 
+  @articleid INT
+/*
+Get the article header information along with the author(s). multiple authors
+result in multiple rows.
+*/
+AS
+    BEGIN
+        SELECT a.Title,
+                a.Description,
+                a.PublishDate,
+                a.URL,
+                a.ReleaseDate,
+                aa.authororder,
+                c.Email,
+                c.ContactFullName
+            FROM dbo.Articles a
+                INNER JOIN dbo.ArticleAuthors aa
+                ON a.ArticlesID = aa.articleid
+                INNER JOIN dbo.Contacts c
+                ON c.ContactsID = aa.contactid
+			WHERE a.ArticlesID = @articleid
+            ORDER BY aa.authororder;
+ 
+    END;
+
+
+
+GO
diff --git a/Stored Procedures/dbo.spGetActiveFeeds.sql b/Stored Procedures/dbo.spGetActiveFeeds.sql
new file mode 100644
index 0000000..c568c07
--- /dev/null
+++ b/Stored Procedures/dbo.spGetActiveFeeds.sql
@@ -0,0 +1,14 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [dbo].[spGetActiveFeeds]
+AS
+    SELECT RSSFeedID,
+            FeedName,
+            Checked,
+            FeedBurner, active
+        FROM dbo.RSSFeeds
+        WHERE ACTIVE = 1
+		 AND checked = 1;
+GO
diff --git a/Stored Procedures/dbo.spGetUsers.sql b/Stored Procedures/dbo.spGetUsers.sql
new file mode 100644
index 0000000..031621b
--- /dev/null
+++ b/Stored Procedures/dbo.spGetUsers.sql
@@ -0,0 +1,27 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [dbo].[spGetUsers] @active INT = NULL
+/*
+Return the list of all users unless the parameter is passed in. In that case
+only include users matching the parameter value.
+*/
+AS
+    BEGIN
+        IF @active IS NULL
+            SELECT userid,
+                    username,
+                    pwd,
+                    active
+                FROM dbo.Users;
+        ELSE
+            SELECT userid,
+                    username,
+                    pwd,
+                    active
+                FROM dbo.Users
+                WHERE active = @active;
+    END;
+    
+GO
diff --git a/Stored Procedures/dbo.spLoggerAdd.sql b/Stored Procedures/dbo.spLoggerAdd.sql
new file mode 100644
index 0000000..32d150a
--- /dev/null
+++ b/Stored Procedures/dbo.spLoggerAdd.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [dbo].[spLoggerAdd]
+    @logmsg VARCHAR(MAX) = NULL
+  , @logcat VARCHAR(250) = ''
+AS
+    IF @logmsg IS NOT NULL
+        BEGIN
+            BEGIN TRY
+                INSERT  dbo.Logger
+                        ( logdate ,logcategory ,logmsg )
+                VALUES  ( SYSDATETIME() ,@logcat ,@logmsg );
+            END TRY
+            BEGIN CATCH
+                RAISERROR('Logger error', 16, 1 ) WITH LOG;
+            END CATCH;
+        END;
+
+
+GO
diff --git a/Stored Procedures/tArticles.test Retrieve articles with null publicationdate parameter.sql b/Stored Procedures/tArticles.test Retrieve articles with null publicationdate parameter.sql
new file mode 100644
index 0000000..581ec1c
--- /dev/null
+++ b/Stored Procedures/tArticles.test Retrieve articles with null publicationdate parameter.sql
@@ -0,0 +1,72 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+--  Comments here are associated with the test.
+--  For test case examples, see: http://tsqlt.org/user-guide/tsqlt-tutorial/
+CREATE PROCEDURE [tArticles].[test Retrieve articles with null publicationdate parameter]
+AS
+BEGIN
+  --Assemble
+  EXEC tsqlt.FakeTable @TableName = N'Articles', -- nvarchar(max)
+      @SchemaName = N'dbo'
+
+  INSERT dbo.Articles
+          ( AuthorID, Title, Description, URL)
+      VALUES
+          ( 1, 'A Test Article', 'A test Description', 'http:/someurl')
+        , ( 1, 'A second Test Article', 'A new test Description', 'http:/someurl2')
+
+  EXEC tsqlt.FakeTable @TableName = N'ArticleSchedule', -- nvarchar(max)
+      @SchemaName = N'dbo'
+
+  INSERT dbo.ArticleSchedule
+    VALUES ( 1, '20150205' )
+	     , ( 2, DATEADD( DAY, 1, GETDATE() ))
+
+  EXEC tsqlt.FakeTable @TableName = N'Contacts', -- nvarchar(max)
+      @SchemaName = N'dbo'
+
+  INSERT dbo.Contacts
+          ( ContactsID, ContactFullName, Photo)
+      VALUES
+          ( 1, N'Test Author', 0x0010 )
+  
+
+  SELECT 
+    a.ArticlesID
+	, a.[Description]
+	, a.URL
+	, 'PublicationDate' = a.PublishDate
+	, 'ContactFulleName' = ' '
+	, 'Photo' = 0x0
+   INTO #expected
+   FROM articles a
+   WHERE 1 = 0   
+
+   SELECT TOP (0) *
+    INTO #actual
+    FROM #expected
+
+  INSERT #expected 
+    SELECT  1, 'A Test Article', 'A test Description', 'http:/someurl', N'Test Author', 0x0010 
+
+  --Act
+  INSERT #actual 
+     EXEC GetScheduledArticles;
+	   
+  --Assert
+  --  Compare the expected and actual values, or call tSQLt.Fail in an IF statement.  
+  --  Available Asserts: tSQLt.AssertEquals, tSQLt.AssertEqualsString, tSQLt.AssertEqualsTable
+  --  For a complete list, see: http://tsqlt.org/user-guide/assertions/
+  EXEC tsqlt.AssertEqualsTable
+      @Expected = N'#expected', -- nvarchar(max)
+      @Actual = N'#actual', -- nvarchar(max)
+      @FailMsg = N'The procedure does not work with a null publication date' -- nvarchar(max)
+  
+  
+END;
+
+
+
+GO
diff --git a/Stored Procedures/tSQLt.ApplyConstraint.sql b/Stored Procedures/tSQLt.ApplyConstraint.sql
new file mode 100644
index 0000000..6b9c38c
--- /dev/null
+++ b/Stored Procedures/tSQLt.ApplyConstraint.sql
@@ -0,0 +1,34 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[ApplyConstraint]
+       @TableName NVARCHAR(MAX),
+       @ConstraintName NVARCHAR(MAX),
+       @SchemaName NVARCHAR(MAX) = NULL --parameter preserved for backward compatibility. Do not use. Will be removed soon.
+AS
+BEGIN
+  DECLARE @ConstraintType NVARCHAR(MAX);
+  DECLARE @ConstraintObjectId INT;
+  
+  SELECT @ConstraintType = ConstraintType, @ConstraintObjectId = ConstraintObjectId
+    FROM tSQLt.Private_ResolveApplyConstraintParameters (@TableName, @ConstraintName, @SchemaName);
+
+  IF @ConstraintType = 'CHECK_CONSTRAINT'
+  BEGIN
+    EXEC tSQLt.Private_ApplyCheckConstraint @ConstraintObjectId;
+    RETURN 0;
+  END
+
+  IF @ConstraintType = 'FOREIGN_KEY_CONSTRAINT'
+  BEGIN
+    EXEC tSQLt.Private_ApplyForeignKeyConstraint @ConstraintObjectId;
+    RETURN 0;
+  END;  
+   
+  RAISERROR ('ApplyConstraint could not resolve the object names, ''%s'', ''%s''. Be sure to call ApplyConstraint and pass in two parameters, such as: EXEC tSQLt.ApplyConstraint ''MySchema.MyTable'', ''MyConstraint''', 
+             16, 10, @TableName, @ConstraintName);
+  RETURN 0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.ApplyTrigger.sql b/Stored Procedures/tSQLt.ApplyTrigger.sql
new file mode 100644
index 0000000..73706f8
--- /dev/null
+++ b/Stored Procedures/tSQLt.ApplyTrigger.sql
@@ -0,0 +1,38 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[ApplyTrigger]
+  @TableName NVARCHAR(MAX),
+  @TriggerName NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @OrgTableObjectId INT;
+  SELECT @OrgTableObjectId = OrgTableObjectId FROM tSQLt.Private_GetOriginalTableInfo(OBJECT_ID(@TableName)) orgTbl
+  IF(@OrgTableObjectId IS NULL)
+  BEGIN
+    RAISERROR('%s does not exist or was not faked by tSQLt.FakeTable.', 16, 10, @TableName);
+  END;
+  
+  DECLARE @FullTriggerName NVARCHAR(MAX);
+  DECLARE @TriggerObjectId INT;
+  SELECT @FullTriggerName = QUOTENAME(SCHEMA_NAME(schema_id))+'.'+QUOTENAME(name), @TriggerObjectId = object_id
+  FROM sys.objects WHERE PARSENAME(@TriggerName,1) = name AND parent_object_id = @OrgTableObjectId;
+  
+  DECLARE @TriggerCode NVARCHAR(MAX);
+  SELECT @TriggerCode = m.definition
+    FROM sys.sql_modules m
+   WHERE m.object_id = @TriggerObjectId;
+  
+  IF (@TriggerCode IS NULL)
+  BEGIN
+    RAISERROR('%s is not a trigger on %s', 16, 10, @TriggerName, @TableName);
+  END;
+ 
+  EXEC tSQLt.RemoveObject @FullTriggerName;
+  
+  EXEC(@TriggerCode);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.AssertEmptyTable.sql b/Stored Procedures/tSQLt.AssertEmptyTable.sql
new file mode 100644
index 0000000..3049962
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertEmptyTable.sql
@@ -0,0 +1,38 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[AssertEmptyTable]
+  @TableName NVARCHAR(MAX)
+AS
+BEGIN
+  EXEC tSQLt.AssertObjectExists @TableName;
+
+  DECLARE @FullName NVARCHAR(MAX);
+  IF(OBJECT_ID(@TableName) IS NULL AND OBJECT_ID('tempdb..'+@TableName) IS NOT NULL)
+  BEGIN
+    SET @FullName = CASE WHEN LEFT(@TableName,1) = '[' THEN @TableName ELSE QUOTENAME(@TableName)END;
+  END;
+  ELSE
+  BEGIN
+    SET @FullName = tSQLt.Private_GetQuotedFullName(OBJECT_ID(@TableName));
+  END;
+
+  DECLARE @cmd NVARCHAR(MAX);
+  DECLARE @exists INT;
+  SET @cmd = 'SELECT @exists = CASE WHEN EXISTS(SELECT 1 FROM '+@FullName+') THEN 1 ELSE 0 END;'
+  EXEC sp_executesql @cmd,N'@exists INT OUTPUT', @exists OUTPUT;
+  
+  IF(@exists = 1)
+  BEGIN
+    DECLARE @TableToText NVARCHAR(MAX);
+    EXEC tSQLt.TableToText @TableName = @FullName,@txt = @TableToText OUTPUT;
+    DECLARE @Message NVARCHAR(MAX);
+    SET @Message = @FullName + ' was not empty:' + CHAR(13) + CHAR(10)+ @TableToText;
+    EXEC tSQLt.Fail @Message;
+  END
+END
+
+
+GO
diff --git a/Stored Procedures/tSQLt.AssertEquals.sql b/Stored Procedures/tSQLt.AssertEquals.sql
new file mode 100644
index 0000000..7a7a473
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertEquals.sql
@@ -0,0 +1,22 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [tSQLt].[AssertEquals]
+    @Expected SQL_VARIANT,
+    @Actual SQL_VARIANT,
+    @Message NVARCHAR(MAX) = ''
+AS
+BEGIN
+    IF ((@Expected = @Actual) OR (@Actual IS NULL AND @Expected IS NULL))
+      RETURN 0;
+
+    DECLARE @Msg NVARCHAR(MAX);
+    SELECT @Msg = 'Expected: <' + ISNULL(CAST(@Expected AS NVARCHAR(MAX)), 'NULL') + 
+                  '> but was: <' + ISNULL(CAST(@Actual AS NVARCHAR(MAX)), 'NULL') + '>';
+    IF((COALESCE(@Message,'') <> '') AND (@Message NOT LIKE '% ')) SET @Message = @Message + ' ';
+    EXEC tSQLt.Fail @Message, @Msg;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.AssertEqualsString.sql b/Stored Procedures/tSQLt.AssertEqualsString.sql
new file mode 100644
index 0000000..3eef25c
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertEqualsString.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[AssertEqualsString]
+    @Expected NVARCHAR(MAX),
+    @Actual NVARCHAR(MAX),
+    @Message NVARCHAR(MAX) = ''
+AS
+BEGIN
+    IF ((@Expected = @Actual) OR (@Actual IS NULL AND @Expected IS NULL))
+      RETURN 0;
+
+    DECLARE @Msg NVARCHAR(MAX);
+    SELECT @Msg = 'Expected: <' + ISNULL(@Expected, 'NULL') + 
+                  '> but was: <' + ISNULL(@Actual, 'NULL') + '>';
+    EXEC tSQLt.Fail @Message, @Msg;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.AssertEqualsTable.sql b/Stored Procedures/tSQLt.AssertEqualsTable.sql
new file mode 100644
index 0000000..0e74be7
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertEqualsTable.sql
@@ -0,0 +1,48 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE PROCEDURE [tSQLt].[AssertEqualsTable]
+    @Expected NVARCHAR(MAX),
+    @Actual NVARCHAR(MAX),
+    @FailMsg NVARCHAR(MAX) = 'unexpected/missing resultset rows!'
+AS
+BEGIN
+
+    EXEC tSQLt.AssertObjectExists @Expected;
+    EXEC tSQLt.AssertObjectExists @Actual;
+
+    DECLARE @ResultTable NVARCHAR(MAX);    
+    DECLARE @ResultColumn NVARCHAR(MAX);    
+    DECLARE @ColumnList NVARCHAR(MAX);    
+    DECLARE @UnequalRowsExist INT;
+
+    SELECT @ResultTable = tSQLt.Private::CreateUniqueObjectName();
+    SELECT @ResultColumn = 'RC_' + @ResultTable;
+
+    EXEC tSQLt.Private_CreateResultTableForCompareTables 
+      @ResultTable = @ResultTable,
+      @ResultColumn = @ResultColumn,
+      @BaseTable = @Expected;
+        
+    SELECT @ColumnList = tSQLt.Private_GetCommaSeparatedColumnList(@ResultTable, @ResultColumn);
+
+    EXEC tSQLt.Private_ValidateThatAllDataTypesInTableAreSupported @ResultTable, @ColumnList;    
+    
+    EXEC @UnequalRowsExist = tSQLt.Private_CompareTables 
+      @Expected = @Expected,
+      @Actual = @Actual,
+      @ResultTable = @ResultTable,
+      @ColumnList = @ColumnList,
+      @MatchIndicatorColumnName = @ResultColumn;
+        
+    EXEC tSQLt.Private_CompareTablesFailIfUnequalRowsExists 
+      @UnequalRowsExist = @UnequalRowsExist,
+      @ResultTable = @ResultTable,
+      @ResultColumn = @ResultColumn,
+      @ColumnList = @ColumnList,
+      @FailMsg = @FailMsg;   
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.AssertLike.sql b/Stored Procedures/tSQLt.AssertLike.sql
new file mode 100644
index 0000000..0aaa8d5
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertLike.sql
@@ -0,0 +1,26 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [tSQLt].[AssertLike] 
+  @ExpectedPattern NVARCHAR(MAX),
+  @Actual NVARCHAR(MAX),
+  @Message NVARCHAR(MAX) = ''
+AS
+BEGIN
+  IF (LEN(@ExpectedPattern) > 4000)
+  BEGIN
+    RAISERROR ('@ExpectedPattern may not exceed 4000 characters.', 16, 10);
+  END;
+
+  IF ((@Actual LIKE @ExpectedPattern) OR (@Actual IS NULL AND @ExpectedPattern IS NULL))
+  BEGIN
+    RETURN 0;
+  END
+
+  DECLARE @Msg NVARCHAR(MAX);
+  SELECT @Msg = CHAR(13) + CHAR(10) + 'Expected: <' + ISNULL(@ExpectedPattern, 'NULL') + '>' +
+                CHAR(13) + CHAR(10) + ' but was: <' + ISNULL(@Actual, 'NULL') + '>';
+  EXEC tSQLt.Fail @Message, @Msg;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.AssertNotEquals.sql b/Stored Procedures/tSQLt.AssertNotEquals.sql
new file mode 100644
index 0000000..96a9a10
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertNotEquals.sql
@@ -0,0 +1,24 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[AssertNotEquals]
+    @Expected SQL_VARIANT,
+    @Actual SQL_VARIANT,
+    @Message NVARCHAR(MAX) = ''
+AS
+BEGIN
+  IF (@Expected = @Actual)
+  OR (@Expected IS NULL AND @Actual IS NULL)
+  BEGIN
+    DECLARE @msg NVARCHAR(MAX);
+    SET @msg = 'Expected actual value to not ' + 
+               COALESCE('equal <' + tSQLt.Private_SqlVariantFormatter(@Expected)+'>', 'be NULL') + 
+               '.';
+    EXEC tSQLt.Fail @msg, @Message;
+  END;
+  RETURN 0;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.AssertObjectExists.sql b/Stored Procedures/tSQLt.AssertObjectExists.sql
new file mode 100644
index 0000000..dcb2754
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertObjectExists.sql
@@ -0,0 +1,32 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[AssertObjectExists]
+    @ObjectName NVARCHAR(MAX),
+    @Message NVARCHAR(MAX) = ''
+AS
+BEGIN
+    DECLARE @Msg NVARCHAR(MAX);
+    IF(@ObjectName LIKE '#%')
+    BEGIN
+     IF OBJECT_ID('tempdb..'+@ObjectName) IS NULL
+     BEGIN
+         SELECT @Msg = '''' + COALESCE(@ObjectName, 'NULL') + ''' does not exist';
+         EXEC tSQLt.Fail @Message, @Msg;
+         RETURN 1;
+     END;
+    END
+    ELSE
+    BEGIN
+     IF OBJECT_ID(@ObjectName) IS NULL
+     BEGIN
+         SELECT @Msg = '''' + COALESCE(@ObjectName, 'NULL') + ''' does not exist';
+         EXEC tSQLt.Fail @Message, @Msg;
+         RETURN 1;
+     END;
+    END;
+    RETURN 0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.AssertResultSetsHaveSameMetaData.sql b/Stored Procedures/tSQLt.AssertResultSetsHaveSameMetaData.sql
new file mode 100644
index 0000000..1ff8610
--- /dev/null
+++ b/Stored Procedures/tSQLt.AssertResultSetsHaveSameMetaData.sql
@@ -0,0 +1,8 @@
+SET QUOTED_IDENTIFIER OFF
+GO
+SET ANSI_NULLS OFF
+GO
+CREATE PROCEDURE [tSQLt].[AssertResultSetsHaveSameMetaData] (@expectedCommand [nvarchar] (max), @actualCommand [nvarchar] (max))
+WITH EXECUTE AS CALLER
+AS EXTERNAL NAME [tSQLtCLR].[tSQLtCLR.StoredProcedures].[AssertResultSetsHaveSameMetaData]
+GO
diff --git a/Stored Procedures/tSQLt.CaptureOutput.sql b/Stored Procedures/tSQLt.CaptureOutput.sql
new file mode 100644
index 0000000..77ba42a
--- /dev/null
+++ b/Stored Procedures/tSQLt.CaptureOutput.sql
@@ -0,0 +1,8 @@
+SET QUOTED_IDENTIFIER OFF
+GO
+SET ANSI_NULLS OFF
+GO
+CREATE PROCEDURE [tSQLt].[CaptureOutput] (@command [nvarchar] (max))
+WITH EXECUTE AS CALLER
+AS EXTERNAL NAME [tSQLtCLR].[tSQLtCLR.StoredProcedures].[CaptureOutput]
+GO
diff --git a/Stored Procedures/tSQLt.DefaultResultFormatter.sql b/Stored Procedures/tSQLt.DefaultResultFormatter.sql
new file mode 100644
index 0000000..9137e8e
--- /dev/null
+++ b/Stored Procedures/tSQLt.DefaultResultFormatter.sql
@@ -0,0 +1,44 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[DefaultResultFormatter]
+AS
+BEGIN
+    DECLARE @Msg1 NVARCHAR(MAX);
+    DECLARE @Msg2 NVARCHAR(MAX);
+    DECLARE @Msg3 NVARCHAR(MAX);
+    DECLARE @Msg4 NVARCHAR(MAX);
+    DECLARE @IsSuccess INT;
+    DECLARE @SuccessCnt INT;
+    DECLARE @Severity INT;
+    
+    SELECT ROW_NUMBER() OVER(ORDER BY Result DESC, Name ASC) No,Name [Test Case Name], Result
+      INTO #Tmp
+      FROM tSQLt.TestResult;
+    
+    EXEC tSQLt.TableToText @Msg1 OUTPUT, '#Tmp', 'No';
+
+    SELECT @Msg3 = Msg, 
+           @IsSuccess = 1 - SIGN(FailCnt + ErrorCnt),
+           @SuccessCnt = SuccessCnt
+      FROM tSQLt.TestCaseSummary();
+      
+    SELECT @Severity = 16*(1-@IsSuccess);
+    
+    SELECT @Msg2 = REPLICATE('-',LEN(@Msg3)),
+           @Msg4 = CHAR(13)+CHAR(10);
+    
+    
+    EXEC tSQLt.Private_Print @Msg4,0;
+    EXEC tSQLt.Private_Print '+----------------------+',0;
+    EXEC tSQLt.Private_Print '|Test Execution Summary|',0;
+    EXEC tSQLt.Private_Print '+----------------------+',0;
+    EXEC tSQLt.Private_Print @Msg4,0;
+    EXEC tSQLt.Private_Print @Msg1,0;
+    EXEC tSQLt.Private_Print @Msg2,0;
+    EXEC tSQLt.Private_Print @Msg3, @Severity;
+    EXEC tSQLt.Private_Print @Msg2,0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.DropClass.sql b/Stored Procedures/tSQLt.DropClass.sql
new file mode 100644
index 0000000..b7f7e52
--- /dev/null
+++ b/Stored Procedures/tSQLt.DropClass.sql
@@ -0,0 +1,46 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[DropClass]
+    @ClassName NVARCHAR(MAX)
+AS
+BEGIN
+    DECLARE @Cmd NVARCHAR(MAX);
+
+    WITH A(name, type) AS
+           (SELECT QUOTENAME(SCHEMA_NAME(schema_id))+'.'+QUOTENAME(name) , type
+              FROM sys.objects
+             WHERE schema_id = SCHEMA_ID(@ClassName)
+          ),
+         B(no,cmd) AS
+           (SELECT 0,'DROP ' +
+                    CASE type WHEN 'P' THEN 'PROCEDURE'
+                              WHEN 'PC' THEN 'PROCEDURE'
+                              WHEN 'U' THEN 'TABLE'
+                              WHEN 'IF' THEN 'FUNCTION'
+                              WHEN 'TF' THEN 'FUNCTION'
+                              WHEN 'FN' THEN 'FUNCTION'
+                              WHEN 'V' THEN 'VIEW'
+                     END +
+                   ' ' + name + ';'
+              FROM A
+             UNION ALL
+            SELECT -1,'DROP SCHEMA ' + QUOTENAME(name) +';'
+              FROM sys.schemas
+             WHERE schema_id = SCHEMA_ID(@ClassName)
+           ),
+         C(xml)AS
+           (SELECT cmd [text()]
+              FROM B
+             ORDER BY no DESC
+               FOR XML PATH(''), TYPE
+           )
+    SELECT @Cmd = xml.value('/', 'NVARCHAR(MAX)') 
+      FROM C;
+
+    EXEC(@Cmd);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.ExpectException.sql b/Stored Procedures/tSQLt.ExpectException.sql
new file mode 100644
index 0000000..d7dd602
--- /dev/null
+++ b/Stored Procedures/tSQLt.ExpectException.sql
@@ -0,0 +1,23 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[ExpectException]
+@ExpectedMessage NVARCHAR(MAX) = NULL,
+@ExpectedSeverity INT = NULL,
+@ExpectedState INT = NULL,
+@Message NVARCHAR(MAX) = NULL,
+@ExpectedMessagePattern NVARCHAR(MAX) = NULL
+AS
+BEGIN
+ IF(EXISTS(SELECT 1 FROM #ExpectException))
+ BEGIN
+   RAISERROR('Each test can only contain one call to tSQLt.ExpectException or tSQLt.ExpectNoException.',16,10);
+ END;
+ 
+ INSERT INTO #ExpectException(ExpectException, ExpectedMessage, ExpectedSeverity, ExpectedState, ExpectedMessagePattern, FailMessage)
+ VALUES(1, @ExpectedMessage, @ExpectedSeverity, @ExpectedState, @ExpectedMessagePattern, @Message);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.ExpectNoException.sql b/Stored Procedures/tSQLt.ExpectNoException.sql
new file mode 100644
index 0000000..ef2aff6
--- /dev/null
+++ b/Stored Procedures/tSQLt.ExpectNoException.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[ExpectNoException]
+  @Message NVARCHAR(MAX) = NULL
+AS
+BEGIN
+ IF(EXISTS(SELECT 1 FROM #ExpectException))
+ BEGIN
+   RAISERROR('Each test can only contain one call to tSQLt.ExpectException or tSQLt.ExpectNoException.',16,10);
+ END;
+ 
+ INSERT INTO #ExpectException(ExpectException, FailMessage)
+ VALUES(0, @Message);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Fail.sql b/Stored Procedures/tSQLt.Fail.sql
new file mode 100644
index 0000000..cc1bf55
--- /dev/null
+++ b/Stored Procedures/tSQLt.Fail.sql
@@ -0,0 +1,58 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Fail]
+    @Message0 NVARCHAR(MAX) = '',
+    @Message1 NVARCHAR(MAX) = '',
+    @Message2 NVARCHAR(MAX) = '',
+    @Message3 NVARCHAR(MAX) = '',
+    @Message4 NVARCHAR(MAX) = '',
+    @Message5 NVARCHAR(MAX) = '',
+    @Message6 NVARCHAR(MAX) = '',
+    @Message7 NVARCHAR(MAX) = '',
+    @Message8 NVARCHAR(MAX) = '',
+    @Message9 NVARCHAR(MAX) = ''
+AS
+BEGIN
+   DECLARE @WarningMessage NVARCHAR(MAX);
+   SET @WarningMessage = '';
+
+   IF XACT_STATE() = -1
+   BEGIN
+     SET @WarningMessage = CHAR(13)+CHAR(10)+'Warning: Uncommitable transaction detected!';
+
+     DECLARE @TranName NVARCHAR(MAX);
+     SELECT @TranName = TranName
+       FROM tSQLt.TestResult
+      WHERE Id = (SELECT MAX(Id) FROM tSQLt.TestResult);
+
+     DECLARE @TranCount INT;
+     SET @TranCount = @@TRANCOUNT;
+     ROLLBACK;
+     WHILE(@TranCount>0)
+     BEGIN
+       BEGIN TRAN;
+       SET @TranCount = @TranCount -1;
+     END;
+     SAVE TRAN @TranName;
+   END;
+
+   INSERT INTO tSQLt.TestMessage(Msg)
+   SELECT COALESCE(@Message0, '!NULL!')
+        + COALESCE(@Message1, '!NULL!')
+        + COALESCE(@Message2, '!NULL!')
+        + COALESCE(@Message3, '!NULL!')
+        + COALESCE(@Message4, '!NULL!')
+        + COALESCE(@Message5, '!NULL!')
+        + COALESCE(@Message6, '!NULL!')
+        + COALESCE(@Message7, '!NULL!')
+        + COALESCE(@Message8, '!NULL!')
+        + COALESCE(@Message9, '!NULL!')
+        + @WarningMessage;
+        
+   RAISERROR('tSQLt.Failure',16,10);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.FakeTable.sql b/Stored Procedures/tSQLt.FakeTable.sql
new file mode 100644
index 0000000..c3c0421
--- /dev/null
+++ b/Stored Procedures/tSQLt.FakeTable.sql
@@ -0,0 +1,34 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[FakeTable]
+    @TableName NVARCHAR(MAX),
+    @SchemaName NVARCHAR(MAX) = NULL, --parameter preserved for backward compatibility. Do not use. Will be removed soon.
+    @Identity BIT = NULL,
+    @ComputedColumns BIT = NULL,
+    @Defaults BIT = NULL
+AS
+BEGIN
+   DECLARE @OrigSchemaName NVARCHAR(MAX);
+   DECLARE @OrigTableName NVARCHAR(MAX);
+   DECLARE @NewNameOfOriginalTable NVARCHAR(4000);
+   
+   SELECT @OrigSchemaName = @SchemaName,
+          @OrigTableName = @TableName
+   
+   SELECT @SchemaName = CleanSchemaName,
+          @TableName = CleanTableName
+     FROM tSQLt.Private_ResolveFakeTableNamesForBackwardCompatibility(@TableName, @SchemaName);
+   
+   EXEC tSQLt.Private_ValidateFakeTableParameters @SchemaName,@OrigTableName,@OrigSchemaName;
+
+   EXEC tSQLt.Private_RenameObjectToUniqueName @SchemaName, @TableName, @NewNameOfOriginalTable OUTPUT;
+
+   EXEC tSQLt.Private_CreateFakeOfTable @SchemaName, @TableName, @NewNameOfOriginalTable, @Identity, @ComputedColumns, @Defaults;
+
+   EXEC tSQLt.Private_MarkFakeTable @SchemaName, @TableName, @NewNameOfOriginalTable;
+END
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.GetNewTranName.sql b/Stored Procedures/tSQLt.GetNewTranName.sql
new file mode 100644
index 0000000..7882985
--- /dev/null
+++ b/Stored Procedures/tSQLt.GetNewTranName.sql
@@ -0,0 +1,13 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+
+CREATE PROCEDURE [tSQLt].[GetNewTranName]
+  @TranName CHAR(32) OUTPUT
+AS
+BEGIN
+  SELECT @TranName = LEFT('tSQLtTran'+REPLACE(CAST(NEWID() AS NVARCHAR(60)),'-',''),32);
+END;
+GO
diff --git a/Stored Procedures/tSQLt.LogCapturedOutput.sql b/Stored Procedures/tSQLt.LogCapturedOutput.sql
new file mode 100644
index 0000000..676e794
--- /dev/null
+++ b/Stored Procedures/tSQLt.LogCapturedOutput.sql
@@ -0,0 +1,13 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[LogCapturedOutput] @text NVARCHAR(MAX)
+AS
+BEGIN
+  INSERT INTO tSQLt.CaptureOutputLog (OutputText) VALUES (@text);
+END;
+---Build-
+
+GO
diff --git a/Stored Procedures/tSQLt.NewConnection.sql b/Stored Procedures/tSQLt.NewConnection.sql
new file mode 100644
index 0000000..d6c57ba
--- /dev/null
+++ b/Stored Procedures/tSQLt.NewConnection.sql
@@ -0,0 +1,8 @@
+SET QUOTED_IDENTIFIER OFF
+GO
+SET ANSI_NULLS OFF
+GO
+CREATE PROCEDURE [tSQLt].[NewConnection] (@command [nvarchar] (max))
+WITH EXECUTE AS CALLER
+AS EXTERNAL NAME [tSQLtCLR].[tSQLtCLR.StoredProcedures].[NewConnection]
+GO
diff --git a/Stored Procedures/tSQLt.NewTestClass.sql b/Stored Procedures/tSQLt.NewTestClass.sql
new file mode 100644
index 0000000..14bc67b
--- /dev/null
+++ b/Stored Procedures/tSQLt.NewTestClass.sql
@@ -0,0 +1,29 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[NewTestClass]
+    @ClassName NVARCHAR(MAX)
+AS
+BEGIN
+  BEGIN TRY
+    EXEC tSQLt.Private_DisallowOverwritingNonTestSchema @ClassName;
+
+    EXEC tSQLt.DropClass @ClassName = @ClassName;
+
+    DECLARE @QuotedClassName NVARCHAR(MAX);
+    SELECT @QuotedClassName = tSQLt.Private_QuoteClassNameForNewTestClass(@ClassName);
+
+    EXEC ('CREATE SCHEMA ' + @QuotedClassName);  
+    EXEC tSQLt.Private_MarkSchemaAsTestClass @QuotedClassName;
+  END TRY
+  BEGIN CATCH
+    DECLARE @ErrMsg NVARCHAR(MAX);SET @ErrMsg = ERROR_MESSAGE() + ' (Error originated in ' + ERROR_PROCEDURE() + ')';
+    DECLARE @ErrSvr INT;SET @ErrSvr = ERROR_SEVERITY();
+    
+    RAISERROR(@ErrMsg, @ErrSvr, 10);
+  END CATCH;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.NullTestResultFormatter.sql b/Stored Procedures/tSQLt.NullTestResultFormatter.sql
new file mode 100644
index 0000000..6f7aea2
--- /dev/null
+++ b/Stored Procedures/tSQLt.NullTestResultFormatter.sql
@@ -0,0 +1,11 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[NullTestResultFormatter]
+AS
+BEGIN
+  RETURN 0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_ApplyCheckConstraint.sql b/Stored Procedures/tSQLt.Private_ApplyCheckConstraint.sql
new file mode 100644
index 0000000..3387173
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_ApplyCheckConstraint.sql
@@ -0,0 +1,27 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_ApplyCheckConstraint]
+  @ConstraintObjectId INT
+AS
+BEGIN
+  DECLARE @Cmd NVARCHAR(MAX);
+  SELECT @Cmd = 'CONSTRAINT ' + QUOTENAME(name) + ' CHECK' + definition 
+    FROM sys.check_constraints
+   WHERE object_id = @ConstraintObjectId;
+  
+  DECLARE @QuotedTableName NVARCHAR(MAX);
+  
+  SELECT @QuotedTableName = QuotedTableName FROM tSQLt.Private_GetQuotedTableNameForConstraint(@ConstraintObjectId);
+
+  EXEC tSQLt.Private_RenameObjectToUniqueNameUsingObjectId @ConstraintObjectId;
+  SELECT @Cmd = 'ALTER TABLE ' + @QuotedTableName + ' ADD ' + @Cmd
+    FROM sys.objects 
+   WHERE object_id = @ConstraintObjectId;
+
+  EXEC (@Cmd);
+
+END; 
+GO
diff --git a/Stored Procedures/tSQLt.Private_ApplyForeignKeyConstraint.sql b/Stored Procedures/tSQLt.Private_ApplyForeignKeyConstraint.sql
new file mode 100644
index 0000000..4e425c5
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_ApplyForeignKeyConstraint.sql
@@ -0,0 +1,34 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_ApplyForeignKeyConstraint] 
+  @ConstraintObjectId INT
+AS
+BEGIN
+  DECLARE @SchemaName NVARCHAR(MAX);
+  DECLARE @OrgTableName NVARCHAR(MAX);
+  DECLARE @TableName NVARCHAR(MAX);
+  DECLARE @ConstraintName NVARCHAR(MAX);
+  DECLARE @CreateFkCmd NVARCHAR(MAX);
+  DECLARE @AlterTableCmd NVARCHAR(MAX);
+  DECLARE @CreateIndexCmd NVARCHAR(MAX);
+  DECLARE @FinalCmd NVARCHAR(MAX);
+  
+  SELECT @SchemaName = SchemaName,
+         @OrgTableName = OrgTableName,
+         @TableName = TableName,
+         @ConstraintName = OBJECT_NAME(@ConstraintObjectId)
+    FROM tSQLt.Private_GetQuotedTableNameForConstraint(@ConstraintObjectId);
+      
+  SELECT @CreateFkCmd = cmd, @CreateIndexCmd = CreIdxCmd
+    FROM tSQLt.Private_GetForeignKeyDefinition(@SchemaName, @OrgTableName, @ConstraintName);
+  SELECT @AlterTableCmd = 'ALTER TABLE ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@TableName) + 
+                          ' ADD ' + @CreateFkCmd;
+  SELECT @FinalCmd = @CreateIndexCmd + @AlterTableCmd;
+
+  EXEC tSQLt.Private_RenameObjectToUniqueName @SchemaName, @ConstraintName;
+  EXEC (@FinalCmd);
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_CleanTestResult.sql b/Stored Procedures/tSQLt.Private_CleanTestResult.sql
new file mode 100644
index 0000000..5f082cb
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_CleanTestResult.sql
@@ -0,0 +1,11 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_CleanTestResult]
+AS
+BEGIN
+   DELETE FROM tSQLt.TestResult;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_CompareTables.sql b/Stored Procedures/tSQLt.Private_CompareTables.sql
new file mode 100644
index 0000000..a532c78
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_CompareTables.sql
@@ -0,0 +1,65 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE PROCEDURE [tSQLt].[Private_CompareTables]
+    @Expected NVARCHAR(MAX),
+    @Actual NVARCHAR(MAX),
+    @ResultTable NVARCHAR(MAX),
+    @ColumnList NVARCHAR(MAX),
+    @MatchIndicatorColumnName NVARCHAR(MAX)
+AS
+BEGIN
+    DECLARE @cmd NVARCHAR(MAX);
+    DECLARE @RestoredRowIndexCounterColName NVARCHAR(MAX);
+    SET @RestoredRowIndexCounterColName = @MatchIndicatorColumnName + '_RR';
+    
+    SELECT @cmd = 
+    '
+    INSERT INTO ' + @ResultTable + ' (' + @MatchIndicatorColumnName + ', ' + @ColumnList + ') 
+    SELECT 
+      CASE 
+        WHEN RestoredRowIndex.'+@RestoredRowIndexCounterColName+' <= CASE WHEN [_{Left}_]<[_{Right}_] THEN [_{Left}_] ELSE [_{Right}_] END
+         THEN ''='' 
+        WHEN RestoredRowIndex.'+@RestoredRowIndexCounterColName+' <= [_{Left}_] 
+         THEN ''<'' 
+        ELSE ''>'' 
+      END AS ' + @MatchIndicatorColumnName + ', ' + @ColumnList + '
+    FROM(
+      SELECT SUM([_{Left}_]) AS [_{Left}_], 
+             SUM([_{Right}_]) AS [_{Right}_], 
+             ' + @ColumnList + ' 
+      FROM (
+        SELECT 1 AS [_{Left}_], 0[_{Right}_], ' + @ColumnList + '
+          FROM ' + @Expected + '
+        UNION ALL 
+        SELECT 0[_{Left}_], 1 AS [_{Right}_], ' + @ColumnList + ' 
+          FROM ' + @Actual + '
+      ) AS X 
+      GROUP BY ' + @ColumnList + ' 
+    ) AS CollapsedRows
+    CROSS APPLY (
+       SELECT TOP(CASE WHEN [_{Left}_]>[_{Right}_] THEN [_{Left}_] 
+                       ELSE [_{Right}_] END) 
+              ROW_NUMBER() OVER(ORDER BY(SELECT 1)) 
+         FROM (SELECT 1 
+                 FROM ' + @Actual + ' UNION ALL SELECT 1 FROM ' + @Expected + ') X(X)
+              ) AS RestoredRowIndex(' + @RestoredRowIndexCounterColName + ');';
+    
+    EXEC (@cmd); --MainGroupQuery
+    
+    SET @cmd = 'SET @r = 
+         CASE WHEN EXISTS(
+                  SELECT 1 
+                    FROM ' + @ResultTable + 
+                 ' WHERE ' + @MatchIndicatorColumnName + ' IN (''<'', ''>'')) 
+              THEN 1 ELSE 0 
+         END';
+    DECLARE @UnequalRowsExist INT;
+    EXEC sp_executesql @cmd, N'@r INT OUTPUT',@UnequalRowsExist OUTPUT;
+    
+    RETURN @UnequalRowsExist;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_CompareTablesFailIfUnequalRowsExists.sql b/Stored Procedures/tSQLt.Private_CompareTablesFailIfUnequalRowsExists.sql
new file mode 100644
index 0000000..6ff76b3
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_CompareTablesFailIfUnequalRowsExists.sql
@@ -0,0 +1,28 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE PROCEDURE [tSQLt].[Private_CompareTablesFailIfUnequalRowsExists]
+ @UnequalRowsExist INT,
+ @ResultTable NVARCHAR(MAX),
+ @ResultColumn NVARCHAR(MAX),
+ @ColumnList NVARCHAR(MAX),
+ @FailMsg NVARCHAR(MAX)
+AS
+BEGIN
+  IF @UnequalRowsExist > 0
+  BEGIN
+   DECLARE @TableToTextResult NVARCHAR(MAX);
+   DECLARE @OutputColumnList NVARCHAR(MAX);
+   SELECT @OutputColumnList = '[_m_],' + @ColumnList;
+   EXEC tSQLt.TableToText @TableName = @ResultTable, @OrderBy = @ResultColumn, @PrintOnlyColumnNameAliasList = @OutputColumnList, @txt = @TableToTextResult OUTPUT;
+   
+   DECLARE @Message NVARCHAR(MAX);
+   SELECT @Message = @FailMsg + CHAR(13) + CHAR(10);
+
+    EXEC tSQLt.Fail @Message, @TableToTextResult;
+  END;
+END
+---BUILD-
+GO
diff --git a/Stored Procedures/tSQLt.Private_CreateFakeOfTable.sql b/Stored Procedures/tSQLt.Private_CreateFakeOfTable.sql
new file mode 100644
index 0000000..69661fc
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_CreateFakeOfTable.sql
@@ -0,0 +1,44 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_CreateFakeOfTable]
+  @SchemaName NVARCHAR(MAX),
+  @TableName NVARCHAR(MAX),
+  @NewNameOfOriginalTable NVARCHAR(MAX),
+  @Identity BIT,
+  @ComputedColumns BIT,
+  @Defaults BIT
+AS
+BEGIN
+   DECLARE @Cmd NVARCHAR(MAX);
+   DECLARE @Cols NVARCHAR(MAX);
+   
+   SELECT @Cols = 
+   (
+    SELECT
+       ',' +
+       QUOTENAME(name) + 
+       cc.ColumnDefinition +
+       dc.DefaultDefinition + 
+       id.IdentityDefinition +
+       CASE WHEN cc.IsComputedColumn = 1 OR id.IsIdentityColumn = 1 
+            THEN ''
+            ELSE ' NULL'
+       END
+      FROM sys.columns c
+     CROSS APPLY tSQLt.Private_GetDataTypeOrComputedColumnDefinition(c.user_type_id, c.max_length, c.precision, c.scale, c.collation_name, c.object_id, c.column_id, @ComputedColumns) cc
+     CROSS APPLY tSQLt.Private_GetDefaultConstraintDefinition(c.object_id, c.column_id, @Defaults) AS dc
+     CROSS APPLY tSQLt.Private_GetIdentityDefinition(c.object_id, c.column_id, @Identity) AS id
+     WHERE object_id = OBJECT_ID(@SchemaName + '.' + @NewNameOfOriginalTable)
+     ORDER BY column_id
+     FOR XML PATH(''), TYPE
+    ).value('.', 'NVARCHAR(MAX)');
+    
+   SELECT @Cmd = 'CREATE TABLE ' + @SchemaName + '.' + @TableName + '(' + STUFF(@Cols,1,1,'') + ')';
+   
+   EXEC (@Cmd);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_CreateProcedureSpy.sql b/Stored Procedures/tSQLt.Private_CreateProcedureSpy.sql
new file mode 100644
index 0000000..3de4392
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_CreateProcedureSpy.sql
@@ -0,0 +1,93 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_CreateProcedureSpy]
+    @ProcedureObjectId INT,
+    @OriginalProcedureName NVARCHAR(MAX),
+    @LogTableName NVARCHAR(MAX),
+    @CommandToExecute NVARCHAR(MAX) = NULL
+AS
+BEGIN
+    DECLARE @Cmd NVARCHAR(MAX);
+    DECLARE @ProcParmList NVARCHAR(MAX),
+            @TableColList NVARCHAR(MAX),
+            @ProcParmTypeList NVARCHAR(MAX),
+            @TableColTypeList NVARCHAR(MAX);
+            
+    DECLARE @Seperator CHAR(1),
+            @ProcParmTypeListSeparater CHAR(1),
+            @ParamName sysname,
+            @TypeName sysname,
+            @IsOutput BIT,
+            @IsCursorRef BIT;
+            
+
+      
+    SELECT @Seperator = '', @ProcParmTypeListSeparater = '', 
+           @ProcParmList = '', @TableColList = '', @ProcParmTypeList = '', @TableColTypeList = '';
+      
+    DECLARE Parameters CURSOR FOR
+     SELECT p.name, t.TypeName, is_output, is_cursor_ref
+       FROM sys.parameters p
+       CROSS APPLY tSQLt.Private_GetFullTypeName(p.user_type_id,p.max_length,p.precision,p.scale,NULL) t
+      WHERE object_id = @ProcedureObjectId;
+    
+    OPEN Parameters;
+    
+    FETCH NEXT FROM Parameters INTO @ParamName, @TypeName, @IsOutput, @IsCursorRef;
+    WHILE (@@FETCH_STATUS = 0)
+    BEGIN
+        IF @IsCursorRef = 0
+        BEGIN
+            SELECT @ProcParmList = @ProcParmList + @Seperator + @ParamName, 
+                   @TableColList = @TableColList + @Seperator + '[' + STUFF(@ParamName,1,1,'') + ']', 
+                   @ProcParmTypeList = @ProcParmTypeList + @ProcParmTypeListSeparater + @ParamName + ' ' + @TypeName + ' = NULL ' + 
+                                       CASE WHEN @IsOutput = 1 THEN ' OUT' 
+                                            ELSE '' 
+                                       END, 
+                   @TableColTypeList = @TableColTypeList + ',[' + STUFF(@ParamName,1,1,'') + '] ' + 
+                          CASE WHEN @TypeName LIKE '%nchar%'
+                                 OR @TypeName LIKE '%nvarchar%'
+                               THEN 'nvarchar(MAX)'
+                               WHEN @TypeName LIKE '%char%'
+                               THEN 'varchar(MAX)'
+                               ELSE @TypeName
+                          END + ' NULL';
+
+            SELECT @Seperator = ',';        
+            SELECT @ProcParmTypeListSeparater = ',';
+        END
+        ELSE
+        BEGIN
+            SELECT @ProcParmTypeList = @ProcParmTypeListSeparater + @ParamName + ' CURSOR VARYING OUTPUT';
+            SELECT @ProcParmTypeListSeparater = ',';
+        END;
+        
+        FETCH NEXT FROM Parameters INTO @ParamName, @TypeName, @IsOutput, @IsCursorRef;
+    END;
+    
+    CLOSE Parameters;
+    DEALLOCATE Parameters;
+    
+    DECLARE @InsertStmt NVARCHAR(MAX);
+    SELECT @InsertStmt = 'INSERT INTO ' + @LogTableName + 
+                         CASE WHEN @TableColList = '' THEN ' DEFAULT VALUES'
+                              ELSE ' (' + @TableColList + ') SELECT ' + @ProcParmList
+                         END + ';';
+                         
+    SELECT @Cmd = 'CREATE TABLE ' + @LogTableName + ' (_id_ int IDENTITY(1,1) PRIMARY KEY CLUSTERED ' + @TableColTypeList + ');';
+    EXEC(@Cmd);
+
+    SELECT @Cmd = 'CREATE PROCEDURE ' + @OriginalProcedureName + ' ' + @ProcParmTypeList + 
+                  ' AS BEGIN ' + 
+                     @InsertStmt + 
+                     ISNULL(@CommandToExecute, '') + ';' +
+                  ' END;';
+    EXEC(@Cmd);
+
+    RETURN 0;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_CreateResultTableForCompareTables.sql b/Stored Procedures/tSQLt.Private_CreateResultTableForCompareTables.sql
new file mode 100644
index 0000000..62ae678
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_CreateResultTableForCompareTables.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE PROCEDURE [tSQLt].[Private_CreateResultTableForCompareTables]
+ @ResultTable NVARCHAR(MAX),
+ @ResultColumn NVARCHAR(MAX),
+ @BaseTable NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @Cmd NVARCHAR(MAX);
+  SET @Cmd = '
+     SELECT ''='' AS ' + @ResultColumn + ', Expected.* INTO ' + @ResultTable + ' 
+       FROM tSQLt.Private_NullCellTable N 
+       LEFT JOIN ' + @BaseTable + ' AS Expected ON N.I <> N.I 
+     TRUNCATE TABLE ' + @ResultTable + ';' --Need to insert an actual row to prevent IDENTITY property from transfering (IDENTITY_COL can't be NULLable);
+  EXEC(@Cmd);
+END
+---BUILD-
+GO
diff --git a/Stored Procedures/tSQLt.Private_DisallowOverwritingNonTestSchema.sql b/Stored Procedures/tSQLt.Private_DisallowOverwritingNonTestSchema.sql
new file mode 100644
index 0000000..ff5ddde
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_DisallowOverwritingNonTestSchema.sql
@@ -0,0 +1,16 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_DisallowOverwritingNonTestSchema]
+  @ClassName NVARCHAR(MAX)
+AS
+BEGIN
+  IF SCHEMA_ID(@ClassName) IS NOT NULL AND tSQLt.Private_IsTestClass(@ClassName) = 0
+  BEGIN
+    RAISERROR('Attempted to execute tSQLt.NewTestClass on ''%s'' which is an existing schema but not a test class', 16, 10, @ClassName);
+  END
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_GetSetupProcedureName.sql b/Stored Procedures/tSQLt.Private_GetSetupProcedureName.sql
new file mode 100644
index 0000000..47cdd35
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_GetSetupProcedureName.sql
@@ -0,0 +1,17 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+
+CREATE PROCEDURE [tSQLt].[Private_GetSetupProcedureName]
+  @TestClassId INT = NULL,
+  @SetupProcName NVARCHAR(MAX) OUTPUT
+AS
+BEGIN
+    SELECT @SetupProcName = tSQLt.Private_GetQuotedFullName(object_id)
+      FROM sys.procedures
+     WHERE schema_id = @TestClassId
+       AND LOWER(name) = 'setup';
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_MarkFakeTable.sql b/Stored Procedures/tSQLt.Private_MarkFakeTable.sql
new file mode 100644
index 0000000..0856c62
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_MarkFakeTable.sql
@@ -0,0 +1,22 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_MarkFakeTable]
+  @SchemaName NVARCHAR(MAX),
+  @TableName NVARCHAR(MAX),
+  @NewNameOfOriginalTable NVARCHAR(4000)
+AS
+BEGIN
+   DECLARE @UnquotedSchemaName NVARCHAR(MAX);SET @UnquotedSchemaName = OBJECT_SCHEMA_NAME(OBJECT_ID(@SchemaName+'.'+@TableName));
+   DECLARE @UnquotedTableName NVARCHAR(MAX);SET @UnquotedTableName = OBJECT_NAME(OBJECT_ID(@SchemaName+'.'+@TableName));
+
+   EXEC sys.sp_addextendedproperty 
+      @name = N'tSQLt.FakeTable_OrgTableName', 
+      @value = @NewNameOfOriginalTable, 
+      @level0type = N'SCHEMA', @level0name = @UnquotedSchemaName, 
+      @level1type = N'TABLE',  @level1name = @UnquotedTableName;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_MarkObjectBeforeRename.sql b/Stored Procedures/tSQLt.Private_MarkObjectBeforeRename.sql
new file mode 100644
index 0000000..75d013f
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_MarkObjectBeforeRename.sql
@@ -0,0 +1,15 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_MarkObjectBeforeRename]
+    @SchemaName NVARCHAR(MAX), 
+    @OriginalName NVARCHAR(MAX)
+AS
+BEGIN
+  INSERT INTO tSQLt.Private_RenamedObjectLog (ObjectId, OriginalName) 
+  VALUES (OBJECT_ID(@SchemaName + '.' + @OriginalName), @OriginalName);
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_MarkSchemaAsTestClass.sql b/Stored Procedures/tSQLt.Private_MarkSchemaAsTestClass.sql
new file mode 100644
index 0000000..99ae6c6
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_MarkSchemaAsTestClass.sql
@@ -0,0 +1,22 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_MarkSchemaAsTestClass]
+  @QuotedClassName NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @UnquotedClassName NVARCHAR(MAX);
+
+  SELECT @UnquotedClassName = name
+    FROM sys.schemas
+   WHERE QUOTENAME(name) = @QuotedClassName;
+
+  EXEC sp_addextendedproperty @name = N'tSQLt.TestClass', 
+                              @value = 1,
+                              @level0type = 'SCHEMA',
+                              @level0name = @UnquotedClassName;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_OutputTestResults.sql b/Stored Procedures/tSQLt.Private_OutputTestResults.sql
new file mode 100644
index 0000000..6490e26
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_OutputTestResults.sql
@@ -0,0 +1,14 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_OutputTestResults]
+  @TestResultFormatter NVARCHAR(MAX) = NULL
+AS
+BEGIN
+    DECLARE @Formatter NVARCHAR(MAX);
+    SELECT @Formatter = COALESCE(@TestResultFormatter, tSQLt.GetTestResultFormatter());
+    EXEC (@Formatter);
+END
+GO
diff --git a/Stored Procedures/tSQLt.Private_Print.sql b/Stored Procedures/tSQLt.Private_Print.sql
new file mode 100644
index 0000000..865b280
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_Print.sql
@@ -0,0 +1,35 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_Print] 
+    @Message NVARCHAR(MAX),
+    @Severity INT = 0
+AS 
+BEGIN
+    DECLARE @SPos INT;SET @SPos = 1;
+    DECLARE @EPos INT;
+    DECLARE @Len INT; SET @Len = LEN(@Message);
+    DECLARE @SubMsg NVARCHAR(MAX);
+    DECLARE @Cmd NVARCHAR(MAX);
+    
+    DECLARE @CleanedMessage NVARCHAR(MAX);
+    SET @CleanedMessage = REPLACE(@Message,'%','%%');
+    
+    WHILE (@SPos <= @Len)
+    BEGIN
+      SET @EPos = CHARINDEX(CHAR(13)+CHAR(10),@CleanedMessage+CHAR(13)+CHAR(10),@SPos);
+      SET @SubMsg = SUBSTRING(@CleanedMessage, @SPos, @EPos - @SPos);
+      SET @Cmd = N'RAISERROR(@Msg,@Severity,10) WITH NOWAIT;';
+      EXEC sp_executesql @Cmd, 
+                         N'@Msg NVARCHAR(MAX),@Severity INT',
+                         @SubMsg,
+                         @Severity;
+      SELECT @SPos = @EPos + 2,
+             @Severity = 0; --Print only first line with high severity
+    END
+
+    RETURN 0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_PrintXML.sql b/Stored Procedures/tSQLt.Private_PrintXML.sql
new file mode 100644
index 0000000..3599ee9
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_PrintXML.sql
@@ -0,0 +1,13 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_PrintXML]
+    @Message XML
+AS 
+BEGIN
+    SELECT @Message FOR XML PATH('');--Required together with ":XML ON" sqlcmd statement to allow more than 1mb to be returned
+    RETURN 0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_RenameObjectToUniqueName.sql b/Stored Procedures/tSQLt.Private_RenameObjectToUniqueName.sql
new file mode 100644
index 0000000..edf855c
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_RenameObjectToUniqueName.sql
@@ -0,0 +1,25 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_RenameObjectToUniqueName]
+    @SchemaName NVARCHAR(MAX),
+    @ObjectName NVARCHAR(MAX),
+    @NewName NVARCHAR(MAX) = NULL OUTPUT
+AS
+BEGIN
+   SET @NewName=tSQLt.Private::CreateUniqueObjectName();
+
+   DECLARE @RenameCmd NVARCHAR(MAX);
+   SET @RenameCmd = 'EXEC sp_rename ''' + 
+                          @SchemaName + '.' + @ObjectName + ''', ''' + 
+                          @NewName + ''';';
+   
+   EXEC tSQLt.Private_MarkObjectBeforeRename @SchemaName, @ObjectName;
+
+   EXEC tSQLt.SuppressOutput @RenameCmd;
+
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_RenameObjectToUniqueNameUsingObjectId.sql b/Stored Procedures/tSQLt.Private_RenameObjectToUniqueNameUsingObjectId.sql
new file mode 100644
index 0000000..dd0b6b0
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_RenameObjectToUniqueNameUsingObjectId.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_RenameObjectToUniqueNameUsingObjectId]
+    @ObjectId INT,
+    @NewName NVARCHAR(MAX) = NULL OUTPUT
+AS
+BEGIN
+   DECLARE @SchemaName NVARCHAR(MAX);
+   DECLARE @ObjectName NVARCHAR(MAX);
+   
+   SELECT @SchemaName = QUOTENAME(OBJECT_SCHEMA_NAME(@ObjectId)), @ObjectName = QUOTENAME(OBJECT_NAME(@ObjectId));
+   
+   EXEC tSQLt.Private_RenameObjectToUniqueName @SchemaName,@ObjectName, @NewName OUTPUT;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_Run.sql b/Stored Procedures/tSQLt.Private_Run.sql
new file mode 100644
index 0000000..98b12d3
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_Run.sql
@@ -0,0 +1,46 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_Run]
+   @TestName NVARCHAR(MAX),
+   @TestResultFormatter NVARCHAR(MAX)
+AS
+BEGIN
+SET NOCOUNT ON;
+    DECLARE @FullName NVARCHAR(MAX);
+    DECLARE @TestClassId INT;
+    DECLARE @IsTestClass BIT;
+    DECLARE @IsTestCase BIT;
+    DECLARE @IsSchema BIT;
+    DECLARE @SetUp NVARCHAR(MAX);SET @SetUp = NULL;
+    
+    SELECT @TestName = tSQLt.Private_GetLastTestNameIfNotProvided(@TestName);
+    EXEC tSQLt.Private_SaveTestNameForSession @TestName;
+    
+    SELECT @TestClassId = schemaId,
+           @FullName = quotedFullName,
+           @IsTestClass = isTestClass,
+           @IsSchema = isSchema,
+           @IsTestCase = isTestCase
+      FROM tSQLt.Private_ResolveName(@TestName);
+     
+    EXEC tSQLt.Private_CleanTestResult;
+
+    IF @IsSchema = 1
+    BEGIN
+        EXEC tSQLt.Private_RunTestClass @FullName;
+    END
+    
+    IF @IsTestCase = 1
+    BEGIN
+      DECLARE @SetupProcName NVARCHAR(MAX);
+      EXEC tSQLt.Private_GetSetupProcedureName @TestClassId, @SetupProcName OUTPUT;
+
+      EXEC tSQLt.Private_RunTest @FullName, @SetupProcName;
+    END;
+
+    EXEC tSQLt.Private_OutputTestResults @TestResultFormatter;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_RunAll.sql b/Stored Procedures/tSQLt.Private_RunAll.sql
new file mode 100644
index 0000000..f5a56fd
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_RunAll.sql
@@ -0,0 +1,35 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_RunAll]
+  @TestResultFormatter NVARCHAR(MAX)
+AS
+BEGIN
+  SET NOCOUNT ON;
+  DECLARE @TestClassName NVARCHAR(MAX);
+  DECLARE @TestProcName NVARCHAR(MAX);
+
+  EXEC tSQLt.Private_CleanTestResult;
+
+  DECLARE tests CURSOR LOCAL FAST_FORWARD FOR
+   SELECT Name
+     FROM tSQLt.TestClasses;
+
+  OPEN tests;
+  
+  FETCH NEXT FROM tests INTO @TestClassName;
+  WHILE @@FETCH_STATUS = 0
+  BEGIN
+    EXEC tSQLt.Private_RunTestClass @TestClassName;
+    
+    FETCH NEXT FROM tests INTO @TestClassName;
+  END;
+  
+  CLOSE tests;
+  DEALLOCATE tests;
+  
+  EXEC tSQLt.Private_OutputTestResults @TestResultFormatter;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_RunTest.sql b/Stored Procedures/tSQLt.Private_RunTest.sql
new file mode 100644
index 0000000..8561c9f
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_RunTest.sql
@@ -0,0 +1,186 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_RunTest]
+   @TestName NVARCHAR(MAX),
+   @SetUp NVARCHAR(MAX) = NULL
+AS
+BEGIN
+    DECLARE @Msg NVARCHAR(MAX); SET @Msg = '';
+    DECLARE @Msg2 NVARCHAR(MAX); SET @Msg2 = '';
+    DECLARE @Cmd NVARCHAR(MAX); SET @Cmd = '';
+    DECLARE @TestClassName NVARCHAR(MAX); SET @TestClassName = '';
+    DECLARE @TestProcName NVARCHAR(MAX); SET @TestProcName = '';
+    DECLARE @Result NVARCHAR(MAX); SET @Result = 'Success';
+    DECLARE @TranName CHAR(32); EXEC tSQLt.GetNewTranName @TranName OUT;
+    DECLARE @TestResultId INT;
+    DECLARE @PreExecTrancount INT;
+    
+    TRUNCATE TABLE tSQLt.CaptureOutputLog;
+    CREATE TABLE #ExpectException(ExpectException INT,ExpectedMessage NVARCHAR(MAX), ExpectedSeverity INT, ExpectedState INT, ExpectedMessagePattern NVARCHAR(MAX), FailMessage NVARCHAR(MAX));
+
+    IF EXISTS (SELECT 1 FROM sys.extended_properties WHERE name = N'SetFakeViewOnTrigger')
+    BEGIN
+      RAISERROR('Test system is in an invalid state. SetFakeViewOff must be called if SetFakeViewOn was called. Call SetFakeViewOff after creating all test case procedures.', 16, 10) WITH NOWAIT;
+      RETURN -1;
+    END;
+
+    SELECT @Cmd = 'EXEC ' + @TestName;
+    
+    SELECT @TestClassName = OBJECT_SCHEMA_NAME(OBJECT_ID(@TestName)), --tSQLt.Private_GetCleanSchemaName('', @TestName),
+           @TestProcName = tSQLt.Private_GetCleanObjectName(@TestName);
+           
+    INSERT INTO tSQLt.TestResult(Class, TestCase, TranName, Result) 
+        SELECT @TestClassName, @TestProcName, @TranName, 'A severe error happened during test execution. Test did not finish.'
+        OPTION(MAXDOP 1);
+    SELECT @TestResultId = SCOPE_IDENTITY();
+
+
+    BEGIN TRAN;
+    SAVE TRAN @TranName;
+
+    SET @PreExecTrancount = @@TRANCOUNT;
+    
+    TRUNCATE TABLE tSQLt.TestMessage;
+
+    DECLARE @TmpMsg NVARCHAR(MAX);
+    BEGIN TRY
+        IF (@SetUp IS NOT NULL) EXEC @SetUp;
+        EXEC (@Cmd);
+        IF(EXISTS(SELECT 1 FROM #ExpectException WHERE ExpectException = 1))
+        BEGIN
+          SET @TmpMsg = COALESCE((SELECT FailMessage FROM #ExpectException)+' ','')+'Expected an error to be raised.';
+          EXEC tSQLt.Fail @TmpMsg;
+        END
+    END TRY
+    BEGIN CATCH
+        IF ERROR_MESSAGE() LIKE '%tSQLt.Failure%'
+        BEGIN
+            SELECT @Msg = Msg FROM tSQLt.TestMessage;
+            SET @Result = 'Failure';
+        END
+        ELSE
+        BEGIN
+          DECLARE @ErrorInfo NVARCHAR(MAX);
+          SELECT @ErrorInfo = 
+            COALESCE(ERROR_MESSAGE(), '<ERROR_MESSAGE() is NULL>') + 
+            '[' +COALESCE(LTRIM(STR(ERROR_SEVERITY())), '<ERROR_SEVERITY() is NULL>') + ','+COALESCE(LTRIM(STR(ERROR_STATE())), '<ERROR_STATE() is NULL>') + ']' +
+            '{' + COALESCE(ERROR_PROCEDURE(), '<ERROR_PROCEDURE() is NULL>') + ',' + COALESCE(CAST(ERROR_LINE() AS NVARCHAR), '<ERROR_LINE() is NULL>') + '}';
+
+          IF(EXISTS(SELECT 1 FROM #ExpectException))
+          BEGIN
+            DECLARE @ExpectException INT;
+            DECLARE @ExpectedMessage NVARCHAR(MAX);
+            DECLARE @ExpectedMessagePattern NVARCHAR(MAX);
+            DECLARE @ExpectedSeverity INT;
+            DECLARE @ExpectedState INT;
+            DECLARE @FailMessage NVARCHAR(MAX);
+            SELECT @ExpectException = ExpectException,
+                   @ExpectedMessage = ExpectedMessage, 
+                   @ExpectedSeverity = ExpectedSeverity,
+                   @ExpectedState = ExpectedState,
+                   @ExpectedMessagePattern = ExpectedMessagePattern,
+                   @FailMessage = FailMessage
+              FROM #ExpectException;
+
+            IF(@ExpectException = 1)
+            BEGIN
+              SET @Result = 'Success';
+              SET @TmpMsg = COALESCE(@FailMessage+' ','')+'Exception did not match expectation!';
+              IF(ERROR_MESSAGE() <> @ExpectedMessage)
+              BEGIN
+                SET @TmpMsg = @TmpMsg +CHAR(13)+CHAR(10)+
+                           'Expected Message: <'+@ExpectedMessage+'>'+CHAR(13)+CHAR(10)+
+                           'Actual Message  : <'+ERROR_MESSAGE()+'>';
+                SET @Result = 'Failure';
+              END
+              IF(ERROR_MESSAGE() NOT LIKE @ExpectedMessagePattern)
+              BEGIN
+                SET @TmpMsg = @TmpMsg +CHAR(13)+CHAR(10)+
+                           'Expected Message to be like <'+@ExpectedMessagePattern+'>'+CHAR(13)+CHAR(10)+
+                           'Actual Message            : <'+ERROR_MESSAGE()+'>';
+                SET @Result = 'Failure';
+              END
+              IF(ERROR_SEVERITY() <> @ExpectedSeverity)
+              BEGIN
+                SET @TmpMsg = @TmpMsg +CHAR(13)+CHAR(10)+
+                           'Expected Severity: '+CAST(@ExpectedSeverity AS NVARCHAR(MAX))+CHAR(13)+CHAR(10)+
+                           'Actual Severity  : '+CAST(ERROR_SEVERITY() AS NVARCHAR(MAX));
+                SET @Result = 'Failure';
+              END
+              IF(ERROR_STATE() <> @ExpectedState)
+              BEGIN
+                SET @TmpMsg = @TmpMsg +CHAR(13)+CHAR(10)+
+                           'Expected State: '+CAST(@ExpectedState AS NVARCHAR(MAX))+CHAR(13)+CHAR(10)+
+                           'Actual State  : '+CAST(ERROR_STATE() AS NVARCHAR(MAX));
+                SET @Result = 'Failure';
+              END
+              IF(@Result = 'Failure')
+              BEGIN
+                SET @Msg = @TmpMsg;
+              END
+            END 
+            ELSE
+            BEGIN
+                SET @Result = 'Failure';
+                SET @Msg = 
+                  COALESCE(@FailMessage+' ','')+
+                  'Expected no error to be raised. Instead this error was encountered:'+
+                  CHAR(13)+CHAR(10)+
+                  @ErrorInfo;
+            END
+          END
+          ELSE
+          BEGIN
+            SET @Result = 'Error';
+            SET @Msg = @ErrorInfo;
+          END  
+        END;
+    END CATCH
+
+    BEGIN TRY
+        ROLLBACK TRAN @TranName;
+    END TRY
+    BEGIN CATCH
+        DECLARE @PostExecTrancount INT;
+        SET @PostExecTrancount = @PreExecTrancount - @@TRANCOUNT;
+        IF (@@TRANCOUNT > 0) ROLLBACK;
+        BEGIN TRAN;
+        IF(   @Result <> 'Success'
+           OR @PostExecTrancount <> 0
+          )
+        BEGIN
+          SELECT @Msg = COALESCE(@Msg, '<NULL>') + ' (There was also a ROLLBACK ERROR --> ' + COALESCE(ERROR_MESSAGE(), '<ERROR_MESSAGE() is NULL>') + '{' + COALESCE(ERROR_PROCEDURE(), '<ERROR_PROCEDURE() is NULL>') + ',' + COALESCE(CAST(ERROR_LINE() AS NVARCHAR), '<ERROR_LINE() is NULL>') + '})';
+          SET @Result = 'Error';
+        END
+    END CATCH    
+
+    If(@Result <> 'Success') 
+    BEGIN
+      SET @Msg2 = @TestName + ' failed: (' + @Result + ') ' + @Msg;
+      EXEC tSQLt.Private_Print @Message = @Msg2, @Severity = 0;
+    END
+
+    IF EXISTS(SELECT 1 FROM tSQLt.TestResult WHERE Id = @TestResultId)
+    BEGIN
+        UPDATE tSQLt.TestResult SET
+            Result = @Result,
+            Msg = @Msg
+         WHERE Id = @TestResultId;
+    END
+    ELSE
+    BEGIN
+        INSERT tSQLt.TestResult(Class, TestCase, TranName, Result, Msg)
+        SELECT @TestClassName, 
+               @TestProcName,  
+               '?', 
+               'Error', 
+               'TestResult entry is missing; Original outcome: ' + @Result + ', ' + @Msg;
+    END    
+      
+
+    COMMIT;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_RunTestClass.sql b/Stored Procedures/tSQLt.Private_RunTestClass.sql
new file mode 100644
index 0000000..755daaf
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_RunTestClass.sql
@@ -0,0 +1,36 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_RunTestClass]
+  @TestClassName NVARCHAR(MAX)
+AS
+BEGIN
+    DECLARE @TestCaseName NVARCHAR(MAX);
+    DECLARE @TestClassId INT; SET @TestClassId = tSQLt.Private_GetSchemaId(@TestClassName);
+    DECLARE @SetupProcName NVARCHAR(MAX);
+    EXEC tSQLt.Private_GetSetupProcedureName @TestClassId, @SetupProcName OUTPUT;
+    
+    DECLARE testCases CURSOR LOCAL FAST_FORWARD 
+        FOR
+     SELECT tSQLt.Private_GetQuotedFullName(object_id)
+       FROM sys.procedures
+      WHERE schema_id = @TestClassId
+        AND LOWER(name) LIKE 'test%';
+
+    OPEN testCases;
+    
+    FETCH NEXT FROM testCases INTO @TestCaseName;
+
+    WHILE @@FETCH_STATUS = 0
+    BEGIN
+        EXEC tSQLt.Private_RunTest @TestCaseName, @SetupProcName;
+
+        FETCH NEXT FROM testCases INTO @TestCaseName;
+    END;
+
+    CLOSE testCases;
+    DEALLOCATE testCases;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_SaveTestNameForSession.sql b/Stored Procedures/tSQLt.Private_SaveTestNameForSession.sql
new file mode 100644
index 0000000..b6ad58b
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_SaveTestNameForSession.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_SaveTestNameForSession] 
+  @TestName NVARCHAR(MAX)
+AS
+BEGIN
+  DELETE FROM tSQLt.Run_LastExecution
+   WHERE SessionId = @@SPID;  
+
+  INSERT INTO tSQLt.Run_LastExecution(TestName, SessionId, LoginTime)
+  SELECT TestName = @TestName,
+         session_id,
+         login_time
+    FROM sys.dm_exec_sessions
+   WHERE session_id = @@SPID;
+END
+GO
diff --git a/Stored Procedures/tSQLt.Private_SetFakeViewOff_SingleView.sql b/Stored Procedures/tSQLt.Private_SetFakeViewOff_SingleView.sql
new file mode 100644
index 0000000..6ba4c60
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_SetFakeViewOff_SingleView.sql
@@ -0,0 +1,25 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_SetFakeViewOff_SingleView]
+  @ViewName NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @Cmd NVARCHAR(MAX),
+          @SchemaName NVARCHAR(MAX),
+          @TriggerName NVARCHAR(MAX);
+          
+  SELECT @SchemaName = QUOTENAME(OBJECT_SCHEMA_NAME(ObjId)),
+         @TriggerName = QUOTENAME(OBJECT_NAME(ObjId) + '_SetFakeViewOn')
+    FROM (SELECT OBJECT_ID(@ViewName) AS ObjId) X;
+  
+  SET @Cmd = 'DROP TRIGGER %SCHEMA_NAME%.%TRIGGER_NAME%;';
+      
+  SET @Cmd = REPLACE(@Cmd, '%SCHEMA_NAME%', @SchemaName);
+  SET @Cmd = REPLACE(@Cmd, '%TRIGGER_NAME%', @TriggerName);
+  
+  EXEC(@Cmd);
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_SetFakeViewOn_SingleView.sql b/Stored Procedures/tSQLt.Private_SetFakeViewOn_SingleView.sql
new file mode 100644
index 0000000..40042cf
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_SetFakeViewOn_SingleView.sql
@@ -0,0 +1,44 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_SetFakeViewOn_SingleView]
+  @ViewName NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @Cmd NVARCHAR(MAX),
+          @SchemaName NVARCHAR(MAX),
+          @TriggerName NVARCHAR(MAX);
+          
+  SELECT @SchemaName = OBJECT_SCHEMA_NAME(ObjId),
+         @ViewName = OBJECT_NAME(ObjId),
+         @TriggerName = OBJECT_NAME(ObjId) + '_SetFakeViewOn'
+    FROM (SELECT OBJECT_ID(@ViewName) AS ObjId) X;
+
+  SET @Cmd = 
+     'CREATE TRIGGER $$SCHEMA_NAME$$.$$TRIGGER_NAME$$
+      ON $$SCHEMA_NAME$$.$$VIEW_NAME$$ INSTEAD OF INSERT AS
+      BEGIN
+         RAISERROR(''Test system is in an invalid state. SetFakeViewOff must be called if SetFakeViewOn was called. Call SetFakeViewOff after creating all test case procedures.'', 16, 10) WITH NOWAIT;
+         RETURN;
+      END;
+     ';
+      
+  SET @Cmd = REPLACE(@Cmd, '$$SCHEMA_NAME$$', QUOTENAME(@SchemaName));
+  SET @Cmd = REPLACE(@Cmd, '$$VIEW_NAME$$', QUOTENAME(@ViewName));
+  SET @Cmd = REPLACE(@Cmd, '$$TRIGGER_NAME$$', QUOTENAME(@TriggerName));
+  EXEC(@Cmd);
+
+  EXEC sp_addextendedproperty @name = N'SetFakeViewOnTrigger', 
+                               @value = 1,
+                               @level0type = 'SCHEMA',
+                               @level0name = @SchemaName, 
+                               @level1type = 'VIEW',
+                               @level1name = @ViewName,
+                               @level2type = 'TRIGGER',
+                               @level2name = @TriggerName;
+
+  RETURN 0;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_ValidateFakeTableParameters.sql b/Stored Procedures/tSQLt.Private_ValidateFakeTableParameters.sql
new file mode 100644
index 0000000..d20318f
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_ValidateFakeTableParameters.sql
@@ -0,0 +1,21 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[Private_ValidateFakeTableParameters]
+  @SchemaName NVARCHAR(MAX),
+  @OrigTableName NVARCHAR(MAX),
+  @OrigSchemaName NVARCHAR(MAX)
+AS
+BEGIN
+   IF @SchemaName IS NULL
+   BEGIN
+        DECLARE @FullName NVARCHAR(MAX); SET @FullName = @OrigTableName + COALESCE('.' + @OrigSchemaName, '');
+        
+        RAISERROR ('FakeTable could not resolve the object name, ''%s''. Be sure to call FakeTable and pass in a single parameter, such as: EXEC tSQLt.FakeTable ''MySchema.MyTable''', 
+                   16, 10, @FullName);
+   END;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.Private_ValidateProcedureCanBeUsedWithSpyProcedure.sql b/Stored Procedures/tSQLt.Private_ValidateProcedureCanBeUsedWithSpyProcedure.sql
new file mode 100644
index 0000000..d99f500
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_ValidateProcedureCanBeUsedWithSpyProcedure.sql
@@ -0,0 +1,20 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Private_ValidateProcedureCanBeUsedWithSpyProcedure]
+    @ProcedureName NVARCHAR(MAX)
+AS
+BEGIN
+    IF NOT EXISTS(SELECT 1 FROM sys.procedures WHERE object_id = OBJECT_ID(@ProcedureName))
+    BEGIN
+      RAISERROR('Cannot use SpyProcedure on %s because the procedure does not exist', 16, 10, @ProcedureName) WITH NOWAIT;
+    END;
+    
+    IF (1020 < (SELECT COUNT(*) FROM sys.parameters WHERE object_id = OBJECT_ID(@ProcedureName)))
+    BEGIN
+      RAISERROR('Cannot use SpyProcedure on procedure %s because it contains more than 1020 parameters', 16, 10, @ProcedureName) WITH NOWAIT;
+    END;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.Private_ValidateThatAllDataTypesInTableAreSupported.sql b/Stored Procedures/tSQLt.Private_ValidateThatAllDataTypesInTableAreSupported.sql
new file mode 100644
index 0000000..667533d
--- /dev/null
+++ b/Stored Procedures/tSQLt.Private_ValidateThatAllDataTypesInTableAreSupported.sql
@@ -0,0 +1,19 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE PROCEDURE [tSQLt].[Private_ValidateThatAllDataTypesInTableAreSupported]
+ @ResultTable NVARCHAR(MAX),
+ @ColumnList NVARCHAR(MAX)
+AS
+BEGIN
+    BEGIN TRY
+      EXEC('DECLARE @EatResult INT; SELECT @EatResult = COUNT(1) FROM ' + @ResultTable + ' GROUP BY ' + @ColumnList + ';');
+    END TRY
+    BEGIN CATCH
+      RAISERROR('The table contains a datatype that is not supported for tSQLt.AssertEqualsTable. Please refer to http://tsqlt.org/user-guide/assertions/assertequalstable/ for a list of unsupported datatypes.',16,10);
+    END CATCH
+END;
+---BUILD-
+GO
diff --git a/Stored Procedures/tSQLt.RemoveObject.sql b/Stored Procedures/tSQLt.RemoveObject.sql
new file mode 100644
index 0000000..9ea9e2c
--- /dev/null
+++ b/Stored Procedures/tSQLt.RemoveObject.sql
@@ -0,0 +1,22 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---BUILD+
+CREATE PROCEDURE [tSQLt].[RemoveObject] 
+    @ObjectName NVARCHAR(MAX),
+    @NewName NVARCHAR(MAX) = NULL OUTPUT
+AS
+BEGIN
+  DECLARE @ObjectId INT;
+  SELECT @ObjectId = OBJECT_ID(@ObjectName);
+  
+  IF(@ObjectId IS NULL)
+  BEGIN
+    RAISERROR('%s does not exist!',16,10,@ObjectName);
+  END;
+
+  EXEC tSQLt.Private_RenameObjectToUniqueNameUsingObjectId @ObjectId, @NewName = @NewName OUTPUT;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.ResultSetFilter.sql b/Stored Procedures/tSQLt.ResultSetFilter.sql
new file mode 100644
index 0000000..d491615
--- /dev/null
+++ b/Stored Procedures/tSQLt.ResultSetFilter.sql
@@ -0,0 +1,8 @@
+SET QUOTED_IDENTIFIER OFF
+GO
+SET ANSI_NULLS OFF
+GO
+CREATE PROCEDURE [tSQLt].[ResultSetFilter] (@ResultsetNo [int], @Command [nvarchar] (max))
+WITH EXECUTE AS CALLER
+AS EXTERNAL NAME [tSQLtCLR].[tSQLtCLR.StoredProcedures].[ResultSetFilter]
+GO
diff --git a/Stored Procedures/tSQLt.Run.sql b/Stored Procedures/tSQLt.Run.sql
new file mode 100644
index 0000000..044e776
--- /dev/null
+++ b/Stored Procedures/tSQLt.Run.sql
@@ -0,0 +1,15 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Run]
+   @TestName NVARCHAR(MAX) = NULL
+AS
+BEGIN
+  DECLARE @TestResultFormatter NVARCHAR(MAX);
+  SELECT @TestResultFormatter = tSQLt.GetTestResultFormatter();
+  
+  EXEC tSQLt.Private_Run @TestName, @TestResultFormatter;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.RunAll.sql b/Stored Procedures/tSQLt.RunAll.sql
new file mode 100644
index 0000000..17454f3
--- /dev/null
+++ b/Stored Procedures/tSQLt.RunAll.sql
@@ -0,0 +1,16 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+--------------------------------------------------------------------------------
+
+CREATE PROCEDURE [tSQLt].[RunAll]
+AS
+BEGIN
+  DECLARE @TestResultFormatter NVARCHAR(MAX);
+  SELECT @TestResultFormatter = tSQLt.GetTestResultFormatter();
+  
+  EXEC tSQLt.Private_RunAll @TestResultFormatter;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.RunTest.sql b/Stored Procedures/tSQLt.RunTest.sql
new file mode 100644
index 0000000..6503088
--- /dev/null
+++ b/Stored Procedures/tSQLt.RunTest.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[RunTest]
+   @TestName NVARCHAR(MAX)
+AS
+BEGIN
+  RAISERROR('tSQLt.RunTest has been retired. Please use tSQLt.Run instead.', 16, 10);
+END;
+GO
diff --git a/Stored Procedures/tSQLt.RunTestClass.sql b/Stored Procedures/tSQLt.RunTestClass.sql
new file mode 100644
index 0000000..8ba757c
--- /dev/null
+++ b/Stored Procedures/tSQLt.RunTestClass.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[RunTestClass]
+   @TestClassName NVARCHAR(MAX)
+AS
+BEGIN
+    EXEC tSQLt.Run @TestClassName;
+END
+GO
diff --git a/Stored Procedures/tSQLt.RunWithNullResults.sql b/Stored Procedures/tSQLt.RunWithNullResults.sql
new file mode 100644
index 0000000..2b2fa95
--- /dev/null
+++ b/Stored Procedures/tSQLt.RunWithNullResults.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[RunWithNullResults]
+    @TestName NVARCHAR(MAX) = NULL
+AS
+BEGIN
+  EXEC tSQLt.Private_Run @TestName, 'tSQLt.NullTestResultFormatter';
+END;
+GO
diff --git a/Stored Procedures/tSQLt.RunWithXmlResults.sql b/Stored Procedures/tSQLt.RunWithXmlResults.sql
new file mode 100644
index 0000000..e89a15e
--- /dev/null
+++ b/Stored Procedures/tSQLt.RunWithXmlResults.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[RunWithXmlResults]
+   @TestName NVARCHAR(MAX) = NULL
+AS
+BEGIN
+  EXEC tSQLt.Private_Run @TestName, 'tSQLt.XmlResultFormatter';
+END;
+GO
diff --git a/Stored Procedures/tSQLt.SetFakeViewOff.sql b/Stored Procedures/tSQLt.SetFakeViewOff.sql
new file mode 100644
index 0000000..a172861
--- /dev/null
+++ b/Stored Procedures/tSQLt.SetFakeViewOff.sql
@@ -0,0 +1,31 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[SetFakeViewOff]
+  @SchemaName NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @ViewName NVARCHAR(MAX);
+    
+  DECLARE viewNames CURSOR LOCAL FAST_FORWARD FOR
+   SELECT QUOTENAME(OBJECT_SCHEMA_NAME(t.parent_id)) + '.' + QUOTENAME(OBJECT_NAME(t.parent_id)) AS viewName
+     FROM sys.extended_properties ep
+     JOIN sys.triggers t
+       on ep.major_id = t.object_id
+     WHERE ep.name = N'SetFakeViewOnTrigger'  
+  OPEN viewNames;
+  
+  FETCH NEXT FROM viewNames INTO @ViewName;
+  WHILE @@FETCH_STATUS = 0
+  BEGIN
+    EXEC tSQLt.Private_SetFakeViewOff_SingleView @ViewName;
+    
+    FETCH NEXT FROM viewNames INTO @ViewName;
+  END;
+  
+  CLOSE viewNames;
+  DEALLOCATE viewNames;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.SetFakeViewOn.sql b/Stored Procedures/tSQLt.SetFakeViewOn.sql
new file mode 100644
index 0000000..eea80d3
--- /dev/null
+++ b/Stored Procedures/tSQLt.SetFakeViewOn.sql
@@ -0,0 +1,30 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[SetFakeViewOn]
+  @SchemaName NVARCHAR(MAX)
+AS
+BEGIN
+  DECLARE @ViewName NVARCHAR(MAX);
+    
+  DECLARE viewNames CURSOR LOCAL FAST_FORWARD FOR
+  SELECT QUOTENAME(OBJECT_SCHEMA_NAME(object_id)) + '.' + QUOTENAME([name]) AS viewName
+    FROM sys.views
+   WHERE schema_id = SCHEMA_ID(@SchemaName);
+  
+  OPEN viewNames;
+  
+  FETCH NEXT FROM viewNames INTO @ViewName;
+  WHILE @@FETCH_STATUS = 0
+  BEGIN
+    EXEC tSQLt.Private_SetFakeViewOn_SingleView @ViewName;
+    
+    FETCH NEXT FROM viewNames INTO @ViewName;
+  END;
+  
+  CLOSE viewNames;
+  DEALLOCATE viewNames;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.SetTestResultFormatter.sql b/Stored Procedures/tSQLt.SetTestResultFormatter.sql
new file mode 100644
index 0000000..15057d6
--- /dev/null
+++ b/Stored Procedures/tSQLt.SetTestResultFormatter.sql
@@ -0,0 +1,26 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[SetTestResultFormatter]
+    @Formatter NVARCHAR(4000)
+AS
+BEGIN
+    IF EXISTS (SELECT 1 FROM sys.extended_properties WHERE [name] = N'tSQLt.ResultsFormatter')
+    BEGIN
+        EXEC sp_dropextendedproperty @name = N'tSQLt.ResultsFormatter',
+                                    @level0type = 'SCHEMA',
+                                    @level0name = 'tSQLt',
+                                    @level1type = 'PROCEDURE',
+                                    @level1name = 'Private_OutputTestResults';
+    END;
+
+    EXEC sp_addextendedproperty @name = N'tSQLt.ResultsFormatter', 
+                                @value = @Formatter,
+                                @level0type = 'SCHEMA',
+                                @level0name = 'tSQLt',
+                                @level1type = 'PROCEDURE',
+                                @level1name = 'Private_OutputTestResults';
+END;
+GO
diff --git a/Stored Procedures/tSQLt.SpyProcedure.sql b/Stored Procedures/tSQLt.SpyProcedure.sql
new file mode 100644
index 0000000..3b68f0c
--- /dev/null
+++ b/Stored Procedures/tSQLt.SpyProcedure.sql
@@ -0,0 +1,26 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[SpyProcedure]
+    @ProcedureName NVARCHAR(MAX),
+    @CommandToExecute NVARCHAR(MAX) = NULL
+AS
+BEGIN
+    DECLARE @ProcedureObjectId INT;
+    SELECT @ProcedureObjectId = OBJECT_ID(@ProcedureName);
+
+    EXEC tSQLt.Private_ValidateProcedureCanBeUsedWithSpyProcedure @ProcedureName;
+
+    DECLARE @LogTableName NVARCHAR(MAX);
+    SELECT @LogTableName = QUOTENAME(OBJECT_SCHEMA_NAME(@ProcedureObjectId)) + '.' + QUOTENAME(OBJECT_NAME(@ProcedureObjectId)+'_SpyProcedureLog');
+
+    EXEC tSQLt.Private_RenameObjectToUniqueNameUsingObjectId @ProcedureObjectId;
+
+    EXEC tSQLt.Private_CreateProcedureSpy @ProcedureObjectId, @ProcedureName, @LogTableName, @CommandToExecute;
+
+    RETURN 0;
+END;
+---Build-
+GO
diff --git a/Stored Procedures/tSQLt.StubRecord.sql b/Stored Procedures/tSQLt.StubRecord.sql
new file mode 100644
index 0000000..8b1b565
--- /dev/null
+++ b/Stored Procedures/tSQLt.StubRecord.sql
@@ -0,0 +1,102 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE PROCEDURE [tSQLt].[StubRecord](@SnTableName AS NVARCHAR(MAX), @BintObjId AS BIGINT)  
+AS   
+BEGIN  
+
+    RAISERROR('Warning, tSQLt.StubRecord is not currently supported. Use at your own risk!', 0, 1) WITH NOWAIT;
+
+    DECLARE @VcInsertStmt NVARCHAR(MAX),  
+            @VcInsertValues NVARCHAR(MAX);  
+    DECLARE @SnColumnName NVARCHAR(MAX); 
+    DECLARE @SintDataType SMALLINT; 
+    DECLARE @NvcFKCmd NVARCHAR(MAX);  
+    DECLARE @VcFKVal NVARCHAR(MAX); 
+  
+    SET @VcInsertStmt = 'INSERT INTO ' + @SnTableName + ' ('  
+      
+    DECLARE curColumns CURSOR  
+        LOCAL FAST_FORWARD  
+    FOR  
+    SELECT syscolumns.name,  
+           syscolumns.xtype,  
+           cmd.cmd  
+    FROM syscolumns  
+        LEFT OUTER JOIN dbo.sysconstraints ON syscolumns.id = sysconstraints.id  
+                                      AND syscolumns.colid = sysconstraints.colid  
+                                      AND sysconstraints.status = 1    -- Primary key constraints only  
+        LEFT OUTER JOIN (select fkeyid id,fkey colid,N'select @V=cast(min('+syscolumns.name+') as NVARCHAR) from '+sysobjects.name cmd  
+                        from sysforeignkeys   
+                        join sysobjects on sysobjects.id=sysforeignkeys.rkeyid  
+                        join syscolumns on sysobjects.id=syscolumns.id and syscolumns.colid=rkey) cmd  
+            on cmd.id=syscolumns.id and cmd.colid=syscolumns.colid  
+    WHERE syscolumns.id = OBJECT_ID(@SnTableName)  
+      AND (syscolumns.isnullable = 0 )  
+    ORDER BY ISNULL(sysconstraints.status, 9999), -- Order Primary Key constraints first  
+             syscolumns.colorder  
+  
+    OPEN curColumns  
+  
+    FETCH NEXT FROM curColumns  
+    INTO @SnColumnName, @SintDataType, @NvcFKCmd  
+  
+    -- Treat the first column retrieved differently, no commas need to be added  
+    -- and it is the ObjId column  
+    IF @@FETCH_STATUS = 0  
+    BEGIN  
+        SET @VcInsertStmt = @VcInsertStmt + @SnColumnName  
+        SELECT @VcInsertValues = ')VALUES(' + ISNULL(CAST(@BintObjId AS nvarchar), 'NULL')  
+  
+        FETCH NEXT FROM curColumns  
+        INTO @SnColumnName, @SintDataType, @NvcFKCmd  
+    END  
+    ELSE  
+    BEGIN  
+        -- No columns retrieved, we need to insert into any first column  
+        SELECT @VcInsertStmt = @VcInsertStmt + syscolumns.name  
+        FROM syscolumns  
+        WHERE syscolumns.id = OBJECT_ID(@SnTableName)  
+          AND syscolumns.colorder = 1  
+  
+        SELECT @VcInsertValues = ')VALUES(' + ISNULL(CAST(@BintObjId AS nvarchar), 'NULL')  
+  
+    END  
+  
+    WHILE @@FETCH_STATUS = 0  
+    BEGIN  
+        SET @VcInsertStmt = @VcInsertStmt + ',' + @SnColumnName  
+        SET @VcFKVal=',0'  
+        if @NvcFKCmd is not null  
+        BEGIN  
+            set @VcFKVal=null  
+            exec sp_executesql @NvcFKCmd,N'@V NVARCHAR(MAX) output',@VcFKVal output  
+            set @VcFKVal=isnull(','''+@VcFKVal+'''',',NULL')  
+        END  
+        SET @VcInsertValues = @VcInsertValues + @VcFKVal  
+  
+        FETCH NEXT FROM curColumns  
+        INTO @SnColumnName, @SintDataType, @NvcFKCmd  
+    END  
+      
+    CLOSE curColumns  
+    DEALLOCATE curColumns  
+  
+    SET @VcInsertStmt = @VcInsertStmt + @VcInsertValues + ')'  
+  
+    IF EXISTS (SELECT 1   
+               FROM syscolumns  
+               WHERE status = 128   
+                 AND id = OBJECT_ID(@SnTableName))  
+    BEGIN  
+        SET @VcInsertStmt = 'SET IDENTITY_INSERT ' + @SnTableName + ' ON ' + CHAR(10) +   
+                             @VcInsertStmt + CHAR(10) +   
+                             'SET IDENTITY_INSERT ' + @SnTableName + ' OFF '  
+    END  
+  
+    EXEC (@VcInsertStmt)    -- Execute the actual INSERT statement  
+  
+END  
+
+GO
diff --git a/Stored Procedures/tSQLt.SuppressOutput.sql b/Stored Procedures/tSQLt.SuppressOutput.sql
new file mode 100644
index 0000000..662865e
--- /dev/null
+++ b/Stored Procedures/tSQLt.SuppressOutput.sql
@@ -0,0 +1,8 @@
+SET QUOTED_IDENTIFIER OFF
+GO
+SET ANSI_NULLS OFF
+GO
+CREATE PROCEDURE [tSQLt].[SuppressOutput] (@command [nvarchar] (max))
+WITH EXECUTE AS CALLER
+AS EXTERNAL NAME [tSQLtCLR].[tSQLtCLR.StoredProcedures].[SuppressOutput]
+GO
diff --git a/Stored Procedures/tSQLt.TableCompare.sql b/Stored Procedures/tSQLt.TableCompare.sql
new file mode 100644
index 0000000..fda4036
--- /dev/null
+++ b/Stored Procedures/tSQLt.TableCompare.sql
@@ -0,0 +1,112 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[TableCompare]
+       @Expected NVARCHAR(MAX),
+       @Actual NVARCHAR(MAX),
+       @Txt NVARCHAR(MAX) = NULL OUTPUT
+AS
+BEGIN
+    DECLARE @Cmd NVARCHAR(MAX);
+    DECLARE @R INT;
+    DECLARE @En NVARCHAR(MAX);
+    DECLARE @An NVARCHAR(MAX);
+    DECLARE @Rn NVARCHAR(MAX);
+    SELECT @En = QUOTENAME('#TSQLt_TempTable'+CAST(NEWID() AS NVARCHAR(100))),
+           @An = QUOTENAME('#TSQLt_TempTable'+CAST(NEWID() AS NVARCHAR(100))),
+           @Rn = QUOTENAME('#TSQLt_TempTable'+CAST(NEWID() AS NVARCHAR(100)));
+
+    WITH TA AS (SELECT column_id,name,is_identity
+                  FROM sys.columns 
+                 WHERE object_id = OBJECT_ID(@Actual)
+                 UNION ALL
+                SELECT column_id,name,is_identity
+                  FROM tempdb.sys.columns 
+                 WHERE object_id = OBJECT_ID('tempdb..'+@Actual)
+               ),
+         TB AS (SELECT column_id,name,is_identity
+                  FROM sys.columns 
+                 WHERE object_id = OBJECT_ID(@Expected)
+                 UNION ALL
+                SELECT column_id,name,is_identity
+                  FROM tempdb.sys.columns 
+                 WHERE object_id = OBJECT_ID('tempdb..'+@Expected)
+               ),
+         T AS (SELECT TA.column_id,TA.name,
+                      CASE WHEN TA.is_identity = 1 THEN 1
+                           WHEN TB.is_identity = 1 THEN 1
+                           ELSE 0
+                      END is_identity
+                 FROM TA
+                 LEFT JOIN TB
+                   ON TA.column_id = TB.column_id
+              ),
+         A AS (SELECT column_id,
+                      P0 = ', '+QUOTENAME(name)+
+                           CASE WHEN is_identity = 1
+                                THEN '*1'
+                                ELSE ''
+                           END+
+                         ' AS C'+CAST(column_id AS NVARCHAR),
+                      P1 = CASE WHEN column_id = 1 THEN '' ELSE ' AND ' END+
+                           '((A.C'+
+                           CAST(column_id AS NVARCHAR)+
+                           '=E.C'+
+                           CAST(column_id AS NVARCHAR)+
+                           ') OR (COALESCE(A.C'+ 
+                           CAST(column_id AS NVARCHAR)+
+                           ',E.C'+
+                           CAST(column_id AS NVARCHAR)+
+                           ') IS NULL))',
+                      P2 = ', COALESCE(E.C'+
+                           CAST(column_id AS NVARCHAR)+
+                           ',A.C'+
+                           CAST(column_id AS NVARCHAR)+
+                           ') AS '+
+                           QUOTENAME(name)
+                 FROM T),
+         B(m,p) AS (SELECT 0,0 UNION ALL 
+                    SELECT 1,0 UNION ALL 
+                    SELECT 2,1 UNION ALL 
+                    SELECT 3,2),
+         C(n,cmd) AS (SELECT 100+2000*B.m+column_id,
+                             CASE B.p WHEN 0 THEN P0
+                                      WHEN 1 THEN P1
+                                      WHEN 2 THEN P2
+                             END
+                        FROM A
+                       CROSS JOIN B),
+         D(n,cmd) AS (SELECT * FROM C
+                      UNION ALL
+                      SELECT 1,'SELECT IDENTITY(int,1,1) no'
+                      UNION ALL
+                      SELECT 2001,' INTO '+@An+' FROM '+@Actual+';SELECT IDENTITY(int,1,1) no'
+                      UNION ALL
+                      SELECT 4001,' INTO '+@En+' FROM '+
+                                  @Expected+';'+
+                                  'WITH Match AS (SELECT A.no Ano, E.no Eno FROM '+@An+' A FULL OUTER JOIN '+@En+' E ON '
+                      UNION ALL
+                      SELECT 6001,'),MatchWithRowNo AS (SELECT Ano, Eno, r1=ROW_NUMBER() OVER(PARTITION BY Ano ORDER BY Eno), r2=ROW_NUMBER() OVER(PARTITION BY Eno ORDER BY Ano) FROM Match)'+
+                                  ',CleanMatch AS (SELECT Ano,Eno FROM MatchWithRowNo WHERE r1 = r2)'+
+                                  'SELECT CASE WHEN A.no IS NULL THEN ''<'' WHEN E.no IS NULL THEN ''>'' ELSE ''='' END AS _m_'
+                      UNION ALL
+                      SELECT 8001,' INTO '+@Rn+' FROM CleanMatch FULL JOIN '+@En+' E ON E.no = CleanMatch.Eno FULL JOIN '+@An+' A ON A.no = CleanMatch.Ano;'+
+                                  ' SELECT @R = CASE WHEN EXISTS(SELECT 1 FROM '+@Rn+' WHERE _m_<>''='') THEN -1 ELSE 0 END;'+
+--' SELECT * FROM '+@Rn+';'+
+                                  ' EXEC tSQLt.TableToText @Txt OUTPUT,'''+@Rn+''',''_m_'';'+
+--' PRINT @Txt;'+
+                                  ' DROP TABLE '+@An+'; DROP TABLE '+@En+'; DROP TABLE '+@Rn+';'
+                     ),
+         E(xml) AS (SELECT cmd AS [data()]  FROM D ORDER BY n FOR XML PATH(''), TYPE)
+    select @Cmd = xml.value( '/', 'NVARCHAR(max)' ) from E;
+
+--    PRINT @Cmd;
+    EXEC sp_executesql @Cmd, N'@R INT OUTPUT, @Txt NVARCHAR(MAX) OUTPUT', @R OUTPUT, @Txt OUTPUT;;
+
+--    PRINT 'Outcome:'+CAST(@R AS NVARCHAR);
+--    PRINT @Txt; 
+    RETURN @R;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.TableToText.sql b/Stored Procedures/tSQLt.TableToText.sql
new file mode 100644
index 0000000..b672458
--- /dev/null
+++ b/Stored Procedures/tSQLt.TableToText.sql
@@ -0,0 +1,18 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+---Build+
+CREATE PROCEDURE [tSQLt].[TableToText]
+    @txt NVARCHAR(MAX) OUTPUT,
+    @TableName NVARCHAR(MAX),
+    @OrderBy NVARCHAR(MAX) = NULL,
+    @PrintOnlyColumnNameAliasList NVARCHAR(MAX) = NULL
+AS
+BEGIN
+    SET @txt = tSQLt.Private::TableToString(@TableName, @OrderBy, @PrintOnlyColumnNameAliasList);
+END;
+---Build-
+
+
+GO
diff --git a/Stored Procedures/tSQLt.Uninstall.sql b/Stored Procedures/tSQLt.Uninstall.sql
new file mode 100644
index 0000000..193f8e8
--- /dev/null
+++ b/Stored Procedures/tSQLt.Uninstall.sql
@@ -0,0 +1,15 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[Uninstall]
+AS
+BEGIN
+  DROP TYPE tSQLt.Private;
+
+  EXEC tSQLt.DropClass 'tSQLt';  
+  
+  DROP ASSEMBLY tSQLtCLR;
+END;
+GO
diff --git a/Stored Procedures/tSQLt.XmlResultFormatter.sql b/Stored Procedures/tSQLt.XmlResultFormatter.sql
new file mode 100644
index 0000000..bdfbc33
--- /dev/null
+++ b/Stored Procedures/tSQLt.XmlResultFormatter.sql
@@ -0,0 +1,67 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE PROCEDURE [tSQLt].[XmlResultFormatter]
+AS
+BEGIN
+    DECLARE @XmlOutput XML;
+
+    SELECT @XmlOutput = (
+      SELECT Tag, Parent, [testsuites!1!hide!hide], [testsuite!2!name], [testsuite!2!tests], [testsuite!2!errors], [testsuite!2!failures], [testcase!3!classname], [testcase!3!name], [failure!4!message]  FROM (
+        SELECT 1 AS Tag,
+               NULL AS Parent,
+               'root' AS [testsuites!1!hide!hide],
+               NULL AS [testsuite!2!name],
+               NULL AS [testsuite!2!tests],
+               NULL AS [testsuite!2!errors],
+               NULL AS [testsuite!2!failures],
+               NULL AS [testcase!3!classname],
+               NULL AS [testcase!3!name],
+               NULL AS [failure!4!message]
+        UNION ALL
+        SELECT 2 AS Tag, 
+               1 AS Parent,
+               'root',
+               Class AS [testsuite!2!name],
+               COUNT(1) AS [testsuite!2!tests],
+               SUM(CASE Result WHEN 'Error' THEN 1 ELSE 0 END) AS [testsuite!2!errors],
+               SUM(CASE Result WHEN 'Failure' THEN 1 ELSE 0 END) AS [testsuite!2!failures],
+               NULL AS [testcase!3!classname],
+               NULL AS [testcase!3!name],
+               NULL AS [failure!4!message]
+          FROM tSQLt.TestResult
+        GROUP BY Class
+        UNION ALL
+        SELECT 3 AS Tag,
+               2 AS Parent,
+               'root',
+               Class,
+               NULL,
+               NULL,
+               NULL,
+               Class,
+               TestCase,
+               NULL
+          FROM tSQLt.TestResult
+        UNION ALL
+        SELECT 4 AS Tag,
+               3 AS Parent,
+               'root',
+               Class,
+               NULL,
+               NULL,
+               NULL,
+               Class,
+               TestCase,
+               Msg
+          FROM tSQLt.TestResult
+         WHERE Result IN ('Failure', 'Error')) AS X
+       ORDER BY [testsuite!2!name], [testcase!3!name], Tag
+       FOR XML EXPLICIT
+       );
+
+    EXEC tSQLt.Private_PrintXML @XmlOutput;
+END;
+GO
diff --git a/Tables/dbo.ArticleAuthors.sql b/Tables/dbo.ArticleAuthors.sql
new file mode 100644
index 0000000..8e90ff6
--- /dev/null
+++ b/Tables/dbo.ArticleAuthors.sql
@@ -0,0 +1,7 @@
+CREATE TABLE [dbo].[ArticleAuthors]
+(
+[articleid] [int] NULL,
+[contactid] [int] NULL,
+[authororder] [tinyint] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.ArticleDescriptions.sql b/Tables/dbo.ArticleDescriptions.sql
new file mode 100644
index 0000000..8232eaf
--- /dev/null
+++ b/Tables/dbo.ArticleDescriptions.sql
@@ -0,0 +1,23 @@
+CREATE TABLE [dbo].[ArticleDescriptions]
+(
+[ArticlesID] [int] NOT NULL IDENTITY(1, 1),
+[ShortDescription] [nvarchar] (2200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Description] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ArticlesName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Picture] [image] NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticleDescriptions] ADD CONSTRAINT [PK_ArticleDescriptions] PRIMARY KEY CLUSTERED  ([ArticlesID]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticleDescriptions] ADD CONSTRAINT [FK_ArticleDescriptions] FOREIGN KEY ([ArticlesID]) REFERENCES [dbo].[Articles] ([ArticlesID])
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'A short summary of the article appearing on the main Simple Talk page', 'SCHEMA', N'dbo', 'TABLE', N'ArticleDescriptions', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Deprecated - do not use', 'SCHEMA', N'dbo', 'TABLE', N'ArticleDescriptions', 'COLUMN', N'ArticlesName'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Deprecated - do not use', 'SCHEMA', N'dbo', 'TABLE', N'ArticleDescriptions', 'COLUMN', N'Description'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Deprecated - do not use', 'SCHEMA', N'dbo', 'TABLE', N'ArticleDescriptions', 'COLUMN', N'Picture'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The description that appears on the main web page', 'SCHEMA', N'dbo', 'TABLE', N'ArticleDescriptions', 'COLUMN', N'ShortDescription'
+GO
diff --git a/Tables/dbo.ArticlePrices.sql b/Tables/dbo.ArticlePrices.sql
new file mode 100644
index 0000000..2783810
--- /dev/null
+++ b/Tables/dbo.ArticlePrices.sql
@@ -0,0 +1,33 @@
+CREATE TABLE [dbo].[ArticlePrices]
+(
+[ArticlePricesID] [int] NOT NULL IDENTITY(1, 1),
+[ArticlesID] [int] NULL,
+[Price] [money] NULL,
+[ValidFrom] [datetime] NULL CONSTRAINT [DF__ArticlePr__Valid__1CF15040] DEFAULT (getdate()),
+[ValidTo] [datetime] NULL,
+[Active] [char] (1) COLLATE Latin1_General_CI_AS NULL CONSTRAINT [DF__ArticlePr__Activ__1DE57479] DEFAULT ('N'),
+[SalesPrice] [char] (1) COLLATE Latin1_General_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticlePrices] ADD CONSTRAINT [PK_ArticlePrices] PRIMARY KEY CLUSTERED  ([ArticlePricesID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_ArticlePrices] ON [dbo].[ArticlePrices] ([ArticlesID]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_ArticlePrices_1] ON [dbo].[ArticlePrices] ([ValidFrom]) ON [PRIMARY]
+GO
+CREATE NONCLUSTERED INDEX [IX_ArticlePrices_2] ON [dbo].[ArticlePrices] ([ValidTo]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticlePrices] ADD CONSTRAINT [FK_ArticlePrices] FOREIGN KEY ([ArticlesID]) REFERENCES [dbo].[Articles] ([ArticlesID])
+GO
+DENY REFERENCES ON  [dbo].[ArticlePrices] TO [public]
+GO
+GRANT SELECT ON  [dbo].[ArticlePrices] TO [public]
+GO
+DENY INSERT ON  [dbo].[ArticlePrices] TO [public]
+GO
+DENY DELETE ON  [dbo].[ArticlePrices] TO [public]
+GO
+DENY UPDATE ON  [dbo].[ArticlePrices] TO [public]
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'How much was paid for the article', 'SCHEMA', N'dbo', 'TABLE', N'ArticlePrices', NULL, NULL
+GO
diff --git a/Tables/dbo.ArticlePurchases.sql b/Tables/dbo.ArticlePurchases.sql
new file mode 100644
index 0000000..cf0e4a8
--- /dev/null
+++ b/Tables/dbo.ArticlePurchases.sql
@@ -0,0 +1,11 @@
+CREATE TABLE [dbo].[ArticlePurchases]
+(
+[ArticlePurchasesID] [int] NOT NULL IDENTITY(1, 1),
+[ArticlePricesID] [int] NOT NULL,
+[Quantity] [int] NOT NULL CONSTRAINT [DF__ArticlePu__Quant__22AA2996] DEFAULT ((1)),
+[InvoiceNumber] [nvarchar] (20) COLLATE Latin1_General_CI_AS NULL,
+[PurchaseDate] [datetime] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticlePurchases] ADD CONSTRAINT [PK_ArticlePurchases] PRIMARY KEY CLUSTERED  ([ArticlePurchasesID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.ArticleReferences.sql b/Tables/dbo.ArticleReferences.sql
new file mode 100644
index 0000000..b09d196
--- /dev/null
+++ b/Tables/dbo.ArticleReferences.sql
@@ -0,0 +1,12 @@
+CREATE TABLE [dbo].[ArticleReferences]
+(
+[ArticlesID] [int] NOT NULL IDENTITY(1, 1),
+[Reference] [varchar] (50) COLLATE Latin1_General_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticleReferences] ADD CONSTRAINT [PK_ArticleReferences] PRIMARY KEY CLUSTERED  ([ArticlesID]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[ArticleReferences] ADD CONSTRAINT [FK_Articles] FOREIGN KEY ([ArticlesID]) REFERENCES [dbo].[Articles] ([ArticlesID])
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'References listed in an article', 'SCHEMA', N'dbo', 'TABLE', N'ArticleReferences', NULL, NULL
+GO
diff --git a/Tables/dbo.ArticleSchedule.sql b/Tables/dbo.ArticleSchedule.sql
new file mode 100644
index 0000000..08efdd1
--- /dev/null
+++ b/Tables/dbo.ArticleSchedule.sql
@@ -0,0 +1,6 @@
+CREATE TABLE [dbo].[ArticleSchedule]
+(
+[articledid] [int] NULL,
+[publicationdate] [datetime] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Articles.sql b/Tables/dbo.Articles.sql
new file mode 100644
index 0000000..29adb9d
--- /dev/null
+++ b/Tables/dbo.Articles.sql
@@ -0,0 +1,34 @@
+CREATE TABLE [dbo].[Articles]
+(
+[ArticlesID] [int] NOT NULL IDENTITY(1, 1),
+[AuthorID] [int] NULL,
+[Title] [char] (142) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Description] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Article] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[PublishDate] [datetime] NULL,
+[ModifiedDate] [datetime] NULL,
+[URL] [char] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Comments] [int] NULL,
+[ReleaseDate] [datetime] NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Articles] ADD CONSTRAINT [PK_Article] PRIMARY KEY CLUSTERED  ([ArticlesID]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Articles] ADD CONSTRAINT [FK_Author] FOREIGN KEY ([AuthorID]) REFERENCES [dbo].[Contacts] ([ContactsID])
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Table of Simple Talk articles', 'SCHEMA', N'dbo', 'TABLE', N'Articles', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The actual article content', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'Article'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The number of reader comments for a given article', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'Comments'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'A short description of the article going between the title and "read more"', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'Description'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'When the article was last modified', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'ModifiedDate'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'When the article was published', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'PublishDate'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The main title - appears on main web page as well as heading the article page', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'Title'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The hyperlink when the title or "read more" is clicked', 'SCHEMA', N'dbo', 'TABLE', N'Articles', 'COLUMN', N'URL'
+GO
diff --git a/Tables/dbo.BlogComments.sql b/Tables/dbo.BlogComments.sql
new file mode 100644
index 0000000..9dbf719
--- /dev/null
+++ b/Tables/dbo.BlogComments.sql
@@ -0,0 +1,18 @@
+CREATE TABLE [dbo].[BlogComments]
+(
+[BlogCommentsID] [int] NOT NULL IDENTITY(1, 1),
+[BlogsID] [int] NOT NULL,
+[CommentText] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[CommentDate] [datetime] NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[BlogComments] ADD CONSTRAINT [PK__BlogComments] PRIMARY KEY CLUSTERED  ([BlogCommentsID]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[BlogComments] WITH NOCHECK ADD CONSTRAINT [FK__BlogComments] FOREIGN KEY ([BlogsID]) REFERENCES [dbo].[Blogs] ([BlogsID])
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Comments made by readers', 'SCHEMA', N'dbo', 'TABLE', N'BlogComments', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The date the comment was made', 'SCHEMA', N'dbo', 'TABLE', N'BlogComments', 'COLUMN', N'CommentDate'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The text for the comment', 'SCHEMA', N'dbo', 'TABLE', N'BlogComments', 'COLUMN', N'CommentText'
+GO
diff --git a/Tables/dbo.Blogs.sql b/Tables/dbo.Blogs.sql
new file mode 100644
index 0000000..4f56b6a
--- /dev/null
+++ b/Tables/dbo.Blogs.sql
@@ -0,0 +1,34 @@
+CREATE TABLE [dbo].[Blogs]
+(
+[BlogsID] [int] NOT NULL IDENTITY(1, 1),
+[AuthorID] [int] NULL,
+[Title] [char] (142) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[Article] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[PublishDate] [datetime] NULL,
+[subtitle] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Blogs] ADD CONSTRAINT [PK__Blogs__C03C1E467AEB09A9] PRIMARY KEY CLUSTERED  ([BlogsID]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Blogs] ADD CONSTRAINT [FK_BlogAuthor] FOREIGN KEY ([AuthorID]) REFERENCES [dbo].[Contacts] ([ContactsID])
+GO
+DENY REFERENCES ON  [dbo].[Blogs] TO [public]
+GO
+GRANT SELECT ON  [dbo].[Blogs] TO [public]
+GO
+DENY INSERT ON  [dbo].[Blogs] TO [public]
+GO
+DENY DELETE ON  [dbo].[Blogs] TO [public]
+GO
+DENY UPDATE ON  [dbo].[Blogs] TO [public]
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Blog posts made by Simple Talk members', 'SCHEMA', N'dbo', 'TABLE', N'Blogs', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'The body text for the Blog', 'SCHEMA', N'dbo', 'TABLE', N'Blogs', 'COLUMN', N'Article'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Authors link back to the Contacts table', 'SCHEMA', N'dbo', 'TABLE', N'Blogs', 'COLUMN', N'AuthorID'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Date the Blog was published', 'SCHEMA', N'dbo', 'TABLE', N'Blogs', 'COLUMN', N'PublishDate'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Title of a Blog', 'SCHEMA', N'dbo', 'TABLE', N'Blogs', 'COLUMN', N'Title'
+GO
diff --git a/Tables/dbo.Contacts.sql b/Tables/dbo.Contacts.sql
new file mode 100644
index 0000000..8aee076
--- /dev/null
+++ b/Tables/dbo.Contacts.sql
@@ -0,0 +1,36 @@
+CREATE TABLE [dbo].[Contacts]
+(
+[ContactsID] [int] NOT NULL IDENTITY(1, 1),
+[ContactFullName] [nvarchar] (100) COLLATE Latin1_General_CI_AS NOT NULL,
+[PhoneWork] [nvarchar] (25) COLLATE Latin1_General_CI_AS NULL,
+[PhoneMobile] [nvarchar] (25) COLLATE Latin1_General_CI_AS NULL,
+[Address1] [nvarchar] (128) COLLATE Latin1_General_CI_AS NULL,
+[Address2] [nvarchar] (128) COLLATE Latin1_General_CI_AS NULL,
+[Address3] [nvarchar] (128) COLLATE Latin1_General_CI_AS NULL,
+[CountryCode] [nvarchar] (4) COLLATE Latin1_General_CI_AS NULL CONSTRAINT [DF__Contacts__Countr__117F9D94] DEFAULT (N'US'),
+[JoiningDate] [datetime] NULL CONSTRAINT [DF__Contacts__Joinin__1273C1CD] DEFAULT (getdate()),
+[ModifiedDate] [datetime] NULL,
+[Email] [nvarchar] (256) COLLATE Latin1_General_CI_AS NULL,
+[Photo] [image] NULL,
+[LinkedIn] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Contacts] ADD CONSTRAINT [PK__Contacts__912F378B7C53D1A0] PRIMARY KEY CLUSTERED  ([ContactsID]) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Contacts] ADD CONSTRAINT [FK__Contacts__Countr__145C0A3F] FOREIGN KEY ([CountryCode]) REFERENCES [dbo].[CountryCodes] ([CountryCode])
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'A list of all Simple Talk members, including authors, bloggers, and any other member or contributor', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Contact name', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', 'COLUMN', N'ContactFullName'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Country for the given address', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', 'COLUMN', N'CountryCode'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Contact email address', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', 'COLUMN', N'Email'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'When the contact joined Simple Talk', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', 'COLUMN', N'JoiningDate'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'When the contact details were last modified', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', 'COLUMN', N'ModifiedDate'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Photo of contact, especially authors.
+This is now deprecated as the photos are saved as image files outside of the database.', 'SCHEMA', N'dbo', 'TABLE', N'Contacts', 'COLUMN', N'Photo'
+GO
diff --git a/Tables/dbo.CountryCodes.sql b/Tables/dbo.CountryCodes.sql
new file mode 100644
index 0000000..2bfe7fd
--- /dev/null
+++ b/Tables/dbo.CountryCodes.sql
@@ -0,0 +1,14 @@
+CREATE TABLE [dbo].[CountryCodes]
+(
+[CountryName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL,
+[CountryCode] [nvarchar] (4) COLLATE Latin1_General_CI_AS NOT NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[CountryCodes] ADD CONSTRAINT [PK_Countries] PRIMARY KEY CLUSTERED  ([CountryCode]) ON [PRIMARY]
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'A list of country codes 
+ISO 3166-1-alpha-2 code
+http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm', 'SCHEMA', N'dbo', 'TABLE', N'CountryCodes', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'In theory shouldn''t need more than two characters', 'SCHEMA', N'dbo', 'TABLE', N'CountryCodes', 'COLUMN', N'CountryCode'
+GO
diff --git a/Tables/dbo.GitDemo.sql b/Tables/dbo.GitDemo.sql
new file mode 100644
index 0000000..0ff8946
--- /dev/null
+++ b/Tables/dbo.GitDemo.sql
@@ -0,0 +1,6 @@
+CREATE TABLE [dbo].[GitDemo]
+(
+[myid] [int] NULL,
+[Myxol] [bit] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Logger.sql b/Tables/dbo.Logger.sql
new file mode 100644
index 0000000..31bd889
--- /dev/null
+++ b/Tables/dbo.Logger.sql
@@ -0,0 +1,7 @@
+CREATE TABLE [dbo].[Logger]
+(
+[logdate] [datetime2] NULL CONSTRAINT [DF__Logger__logdate__69FBBC1F] DEFAULT (getutcdate()),
+[logcategory] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[logmsg] [varchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
diff --git a/Tables/dbo.PersonData.sql b/Tables/dbo.PersonData.sql
new file mode 100644
index 0000000..10c9344
--- /dev/null
+++ b/Tables/dbo.PersonData.sql
@@ -0,0 +1,20 @@
+CREATE TABLE [dbo].[PersonData]
+(
+[ID] [int] NOT NULL IDENTITY(1, 1),
+[NAME] [nvarchar] (200) COLLATE Latin1_General_CI_AS NOT NULL,
+[Email1] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL,
+[Email2] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL,
+[Phone1] [nvarchar] (100) COLLATE Latin1_General_CI_AS NULL,
+[Phone2] [nvarchar] (100) COLLATE Latin1_General_CI_AS NULL,
+[Street1] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL,
+[City1] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL,
+[StateProvince1] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL,
+[PostalCode1] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL,
+[Street2] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL,
+[City2] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL,
+[StateProvince2] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL,
+[PostalCode2] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[PersonData] ADD CONSTRAINT [PK__PersonDa__3214EC27CA5DC9C3] PRIMARY KEY CLUSTERED  ([ID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Provinces.sql b/Tables/dbo.Provinces.sql
new file mode 100644
index 0000000..af4a42c
--- /dev/null
+++ b/Tables/dbo.Provinces.sql
@@ -0,0 +1,9 @@
+CREATE TABLE [dbo].[Provinces]
+(
+[ProvinceID] [int] NOT NULL IDENTITY(1, 1),
+[ProvinceCode] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[ProvinceName] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
+) ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[Provinces] ADD CONSTRAINT [PK__Province__FD0A6FA332E85BB3] PRIMARY KEY CLUSTERED  ([ProvinceID]) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.RSSFeeds.sql b/Tables/dbo.RSSFeeds.sql
new file mode 100644
index 0000000..09b09a0
--- /dev/null
+++ b/Tables/dbo.RSSFeeds.sql
@@ -0,0 +1,18 @@
+CREATE TABLE [dbo].[RSSFeeds]
+(
+[RSSFeedID] [int] NOT NULL IDENTITY(1, 1),
+[FeedName] [varchar] (max) COLLATE Latin1_General_CI_AS NULL,
+[Checked] [bit] NULL,
+[FeedBurner] [bit] NOT NULL,
+[ACTIVE] [bit] NULL,
+[MigrationTest] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [dfBlankSpace] DEFAULT (' ')
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [dbo].[RSSFeeds] ADD CONSTRAINT [PK__RSSFeeds__DF1690F2C1F77AC5] PRIMARY KEY CLUSTERED  ([RSSFeedID]) ON [PRIMARY]
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'A feature to create a custom RSS feed', 'SCHEMA', N'dbo', 'TABLE', N'RSSFeeds', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Whether checked by default on the list offered to users', 'SCHEMA', N'dbo', 'TABLE', N'RSSFeeds', 'COLUMN', N'Checked'
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Eg, SQL, .NET, SysAdmin, Opinion etc.', 'SCHEMA', N'dbo', 'TABLE', N'RSSFeeds', 'COLUMN', N'FeedName'
+GO
diff --git a/Tables/dbo.SQLBits.sql b/Tables/dbo.SQLBits.sql
new file mode 100644
index 0000000..9b4ba1b
--- /dev/null
+++ b/Tables/dbo.SQLBits.sql
@@ -0,0 +1,8 @@
+CREATE TABLE [dbo].[SQLBits]
+(
+[Liverpool] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[SQLBits] [int] NULL,
+[Demotest] [int] NULL,
+[NewColumn] [numeric] (18, 0) NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.SQlinthecity7.sql b/Tables/dbo.SQlinthecity7.sql
new file mode 100644
index 0000000..809d023
--- /dev/null
+++ b/Tables/dbo.SQlinthecity7.sql
@@ -0,0 +1,6 @@
+CREATE TABLE [dbo].[SQlinthecity7]
+(
+[id] [int] NULL,
+[secondif] [int] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Testtable.sql b/Tables/dbo.Testtable.sql
new file mode 100644
index 0000000..b001306
--- /dev/null
+++ b/Tables/dbo.Testtable.sql
@@ -0,0 +1,5 @@
+CREATE TABLE [dbo].[Testtable]
+(
+[id] [int] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.UserContact.sql b/Tables/dbo.UserContact.sql
new file mode 100644
index 0000000..458fbfa
--- /dev/null
+++ b/Tables/dbo.UserContact.sql
@@ -0,0 +1,6 @@
+CREATE TABLE [dbo].[UserContact]
+(
+[userid] [int] NULL,
+[contactid] [int] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.Users.sql b/Tables/dbo.Users.sql
new file mode 100644
index 0000000..3e3688c
--- /dev/null
+++ b/Tables/dbo.Users.sql
@@ -0,0 +1,8 @@
+CREATE TABLE [dbo].[Users]
+(
+[userid] [int] NOT NULL IDENTITY(1, 1),
+[username] [varchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
+[pwd] [varbinary] (max) NULL,
+[active] [tinyint] NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
diff --git a/Tables/dbo.logging.sql b/Tables/dbo.logging.sql
new file mode 100644
index 0000000..1de49d0
--- /dev/null
+++ b/Tables/dbo.logging.sql
@@ -0,0 +1,6 @@
+CREATE TABLE [dbo].[logging]
+(
+[logid] [int] NULL,
+[logdate] [datetime] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/dbo.sqlrelay.sql b/Tables/dbo.sqlrelay.sql
new file mode 100644
index 0000000..576aa1c
--- /dev/null
+++ b/Tables/dbo.sqlrelay.sql
@@ -0,0 +1,5 @@
+CREATE TABLE [dbo].[sqlrelay]
+(
+[id] [int] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/tSQLt.CaptureOutputLog.sql b/Tables/tSQLt.CaptureOutputLog.sql
new file mode 100644
index 0000000..82b32d6
--- /dev/null
+++ b/Tables/tSQLt.CaptureOutputLog.sql
@@ -0,0 +1,8 @@
+CREATE TABLE [tSQLt].[CaptureOutputLog]
+(
+[Id] [int] NOT NULL IDENTITY(1, 1),
+[OutputText] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [tSQLt].[CaptureOutputLog] ADD CONSTRAINT [PK__CaptureO__3214EC07A22B4818] PRIMARY KEY CLUSTERED  ([Id]) ON [PRIMARY]
+GO
diff --git a/Tables/tSQLt.Private_ExpectException.sql b/Tables/tSQLt.Private_ExpectException.sql
new file mode 100644
index 0000000..3ac3727
--- /dev/null
+++ b/Tables/tSQLt.Private_ExpectException.sql
@@ -0,0 +1,5 @@
+CREATE TABLE [tSQLt].[Private_ExpectException]
+(
+[i] [int] NULL
+) ON [PRIMARY]
+GO
diff --git a/Tables/tSQLt.Private_NullCellTable.sql b/Tables/tSQLt.Private_NullCellTable.sql
new file mode 100644
index 0000000..1414c38
--- /dev/null
+++ b/Tables/tSQLt.Private_NullCellTable.sql
@@ -0,0 +1,16 @@
+CREATE TABLE [tSQLt].[Private_NullCellTable]
+(
+[I] [int] NULL
+) ON [PRIMARY]
+GO
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE TRIGGER [tSQLt].[Private_NullCellTable_StopDeletes] ON [tSQLt].[Private_NullCellTable] INSTEAD OF DELETE, INSERT, UPDATE
+AS
+BEGIN
+  RETURN;
+END;
+GO
diff --git a/Tables/tSQLt.Private_RenamedObjectLog.sql b/Tables/tSQLt.Private_RenamedObjectLog.sql
new file mode 100644
index 0000000..9bba261
--- /dev/null
+++ b/Tables/tSQLt.Private_RenamedObjectLog.sql
@@ -0,0 +1,9 @@
+CREATE TABLE [tSQLt].[Private_RenamedObjectLog]
+(
+[Id] [int] NOT NULL IDENTITY(1, 1),
+[ObjectId] [int] NOT NULL,
+[OriginalName] [nvarchar] (max) COLLATE Latin1_General_CI_AS NOT NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [tSQLt].[Private_RenamedObjectLog] ADD CONSTRAINT [PK__Private_RenamedObjectLog__Id] PRIMARY KEY CLUSTERED  ([Id]) ON [PRIMARY]
+GO
diff --git a/Tables/tSQLt.Run_LastExecution.sql b/Tables/tSQLt.Run_LastExecution.sql
new file mode 100644
index 0000000..4d272a1
--- /dev/null
+++ b/Tables/tSQLt.Run_LastExecution.sql
@@ -0,0 +1,7 @@
+CREATE TABLE [tSQLt].[Run_LastExecution]
+(
+[TestName] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL,
+[SessionId] [int] NULL,
+[LoginTime] [datetime] NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
diff --git a/Tables/tSQLt.TestMessage.sql b/Tables/tSQLt.TestMessage.sql
new file mode 100644
index 0000000..73a5e97
--- /dev/null
+++ b/Tables/tSQLt.TestMessage.sql
@@ -0,0 +1,5 @@
+CREATE TABLE [tSQLt].[TestMessage]
+(
+[Msg] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
diff --git a/Tables/tSQLt.TestResult.sql b/Tables/tSQLt.TestResult.sql
new file mode 100644
index 0000000..eb5e639
--- /dev/null
+++ b/Tables/tSQLt.TestResult.sql
@@ -0,0 +1,13 @@
+CREATE TABLE [tSQLt].[TestResult]
+(
+[Id] [int] NOT NULL IDENTITY(1, 1),
+[Class] [nvarchar] (max) COLLATE Latin1_General_CI_AS NOT NULL,
+[TestCase] [nvarchar] (max) COLLATE Latin1_General_CI_AS NOT NULL,
+[Name] AS ((quotename([Class])+'.')+quotename([TestCase])),
+[TranName] [nvarchar] (max) COLLATE Latin1_General_CI_AS NOT NULL,
+[Result] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL,
+[Msg] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL
+) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
+GO
+ALTER TABLE [tSQLt].[TestResult] ADD CONSTRAINT [PK__TestResu__3214EC07216DF657] PRIMARY KEY CLUSTERED  ([Id]) ON [PRIMARY]
+GO
diff --git a/Types/User-defined Data Types/tSQLt.Private.sql b/Types/User-defined Data Types/tSQLt.Private.sql
new file mode 100644
index 0000000..bd89f42
--- /dev/null
+++ b/Types/User-defined Data Types/tSQLt.Private.sql
@@ -0,0 +1,3 @@
+CREATE TYPE [tSQLt].[Private]
+EXTERNAL NAME [tSQLtCLR].[tSQLtCLR.tSQLtPrivate]
+GO
diff --git a/Views/dbo.ArticlesPriceList.sql b/Views/dbo.ArticlesPriceList.sql
new file mode 100644
index 0000000..93bf02a
--- /dev/null
+++ b/Views/dbo.ArticlesPriceList.sql
@@ -0,0 +1,11 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+ -- Create indexed view
+CREATE VIEW [dbo].[ArticlesPriceList]
+AS
+SELECT     a.ArticlesID, a.Description AS Articles, ap.Price
+FROM       dbo.Articles AS a LEFT JOIN
+           dbo.ArticlePrices AS ap ON a.ArticlesID = ap.ArticlePricesID
+GO
diff --git a/Views/dbo.sqlinthecityview.sql b/Views/dbo.sqlinthecityview.sql
new file mode 100644
index 0000000..829e444
--- /dev/null
+++ b/Views/dbo.sqlinthecityview.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE VIEW [dbo].[sqlinthecityview]
+AS
+SELECT top 20
+ * FROM  dbo.SQlinthecity7
+ 
+ -- get data from dbo.SQlinthecity7
+
+GO
diff --git a/Views/dbo.sqlinthecityview9.sql b/Views/dbo.sqlinthecityview9.sql
new file mode 100644
index 0000000..a233e4c
--- /dev/null
+++ b/Views/dbo.sqlinthecityview9.sql
@@ -0,0 +1,12 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE VIEW [dbo].[sqlinthecityview9]
+AS
+SELECT top 20
+ * FROM  dbo.SQlinthecity7
+ 
+ -- get data from dbo.SQlinthecity7
+
+GO
diff --git a/Views/dbo.v_Articles.sql b/Views/dbo.v_Articles.sql
new file mode 100644
index 0000000..d8bc202
--- /dev/null
+++ b/Views/dbo.v_Articles.sql
@@ -0,0 +1,25 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+/* This view gets called from the ST web app to show the articles */
+CREATE VIEW [dbo].[v_Articles]
+AS
+    SELECT  TOP 250 a.[Title] ,
+            a.[PublishDate] ,
+            a.[Description] ,
+            a.[URL] ,
+            a.[Comments], 
+			dbo.calculateEstimateOfReadingTime(a.Article) AS readingTime,
+            c.[ContactFullName] ,
+			c.[Photo],
+			cc.CountryCode,
+			cc.CountryName
+    FROM    Articles a
+		        LEFT JOIN Contacts c ON a.AuthorID = c.ContactsID
+			LEFT JOIN dbo.CountryCodes cc ON c.CountryCode = cc.Countrycode
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'This is the view that is called from the web application to display the articles on the main Simple Talk website', 'SCHEMA', N'dbo', 'VIEW', N'v_Articles', NULL, NULL
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'Note: photos are no longer pulled from the database.', 'SCHEMA', N'dbo', 'VIEW', N'v_Articles', 'COLUMN', N'Photo'
+GO
diff --git a/Views/dbo.v_Blogs.sql b/Views/dbo.v_Blogs.sql
new file mode 100644
index 0000000..5f09d44
--- /dev/null
+++ b/Views/dbo.v_Blogs.sql
@@ -0,0 +1,14 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+CREATE VIEW [dbo].[v_Blogs]
+AS
+SELECT  c.ContactFullName, Title, Article, PublishDate
+FROM    Blogs
+        INNER JOIN dbo.Contacts c ON c.ContactsID = dbo.Blogs.AuthorID
+
+
+GO
+EXEC sp_addextendedproperty N'MS_Description', N'View to pull down list of blogs', 'SCHEMA', N'dbo', 'VIEW', N'v_Blogs', NULL, NULL
+GO
diff --git a/Views/tSQLt.TestClasses.sql b/Views/tSQLt.TestClasses.sql
new file mode 100644
index 0000000..722fee4
--- /dev/null
+++ b/Views/tSQLt.TestClasses.sql
@@ -0,0 +1,14 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+----------------------------------------------------------------------
+CREATE VIEW [tSQLt].[TestClasses]
+AS
+  SELECT s.name AS Name, s.schema_id AS SchemaId
+    FROM sys.extended_properties ep
+    JOIN sys.schemas s
+      ON ep.major_id = s.schema_id
+   WHERE ep.name = N'tSQLt.TestClass';
+GO
diff --git a/Views/tSQLt.Tests.sql b/Views/tSQLt.Tests.sql
new file mode 100644
index 0000000..870a8da
--- /dev/null
+++ b/Views/tSQLt.Tests.sql
@@ -0,0 +1,13 @@
+SET QUOTED_IDENTIFIER ON
+GO
+SET ANSI_NULLS ON
+GO
+
+CREATE VIEW [tSQLt].[Tests]
+AS
+  SELECT classes.SchemaId, classes.Name AS TestClassName, 
+         procs.object_id AS ObjectId, procs.name AS Name
+    FROM tSQLt.TestClasses classes
+    JOIN sys.procedures procs ON classes.SchemaId = procs.schema_id
+   WHERE LOWER(procs.name) LIKE 'test%';
+GO
